/******/var ripple=
/******/(function(modules) {
/******/	var installedModules = {};
/******/	function require(moduleId) {
/******/		if(typeof moduleId !== "number") throw new Error("Cannot find module '"+moduleId+"'");
/******/		if(installedModules[moduleId])
/******/			return installedModules[moduleId].exports;
/******/		var module = installedModules[moduleId] = {
/******/			exports: {},
/******/			id: moduleId,
/******/			loaded: false
/******/		};
/******/		modules[moduleId](module, module.exports, require);
/******/		module.loaded = true;
/******/		return module.exports;
/******/	}
/******/	require.e = function(chunkId, callback) {
/******/		callback(require);
/******/	};
/******/	require.modules = modules;
/******/	require.cache = installedModules;
/******/	return require(0);
/******/})
/******/({c:"",
/******/0: function(module, exports, require) {

eval("exports.Remote = require(7).Remote;\nexports.Amount = require(2).Amount;\nexports.UInt160 = require(2).UInt160;\nexports.Seed = require(2).Seed;\n\n// WEBPACK FOOTER //\n// module.id = 0\n// module.realId = 0\n// module.chunks = main\n//@ sourceURL=webpack-module:///./index.js");

/******/},
/******/
/******/1: function(module, exports, require) {

eval("var console = (function() { return this[\"console\"] || (this[\"window\"] && this[\"window\"].console) || {} }());\r\nmodule.exports = console;\r\nfor(var name in {log:1, info:1, error:1, warn:1, dir:1, trace:1, assert:1})\r\n\tif(!console[name])\r\n\t\tconsole[name] = function() {};\r\nvar times = {};\r\nif(!console.time)\r\nconsole.time = function(label) {\r\n\ttimes[label] = Date.now();\r\n};\r\nif(!console.timeEnd)\r\nconsole.timeEnd = function() {\r\n\tvar duration = Date.now() - times[label];\r\n\tconsole.log('%s: %dms', label, duration);\r\n};\n\n// WEBPACK FOOTER //\n// module.id = 6\n// module.realId = 1\n// module.chunks = main\n//@ sourceURL=webpack-module:///(webpack)/buildin/__webpack_console.js");

/******/},
/******/
/******/2: function(module, exports, require) {

eval("// Represent Ripple amounts and currencies.\n// - Numbers in hex are big-endian.\n\nvar sjcl    = require(4);\nvar bn\t    = sjcl.bn;\nvar utils   = require(3);\nvar jsbn    = require(6);\n\nvar BigInteger\t= jsbn.BigInteger;\nvar nbi\t\t= jsbn.nbi;\n\nvar alphabets\t= {\n   'ripple' : \"rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz\",\n   'tipple' : \"RPShNAF39wBUDnEGHJKLM4pQrsT7VWXYZ2bcdeCg65jkm8ofqi1tuvaxyz\",\n  'bitcoin' : \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n};\n\nvar consts = exports.consts = {\n  'address_xns'\t          : \"rrrrrrrrrrrrrrrrrrrrrhoLvTp\",\n  'address_one'\t          : \"rrrrrrrrrrrrrrrrrrrrBZbvji\",\n  'currency_xns'          : 0,\n  'currency_one'          : 1,\n  'uint160_xns'\t          : utils.hexToString(\"0000000000000000000000000000000000000000\"),\n  'uint160_one'\t          : utils.hexToString(\"0000000000000000000000000000000000000001\"),\n  'hex_xns'\t          : \"0000000000000000000000000000000000000000\",\n  'hex_one'\t          : \"0000000000000000000000000000000000000001\",\n  'xns_precision'         : 6,\n\n  // BigInteger values prefixed with bi_.\n  'bi_5'\t          : new BigInteger('5'),\n  'bi_7'\t          : new BigInteger('7'),\n  'bi_10'\t          : new BigInteger('10'),\n  'bi_1e14'               : new BigInteger(String(1e14)),\n  'bi_1e16'               : new BigInteger(String(1e16)),\n  'bi_1e17'               : new BigInteger(String(1e17)),\n  'bi_1e32'               : new BigInteger('100000000000000000000000000000000'),\n  'bi_man_max_value'      : new BigInteger('9999999999999999'),\n  'bi_man_min_value'      : new BigInteger('1000000000000000'),\n  'bi_xns_max'\t          : new BigInteger(\"9000000000000000000\"),\t  // Json wire limit.\n  'bi_xns_min'\t          : new BigInteger(\"-9000000000000000000\"),\t  // Json wire limit.\n  'bi_xns_unit'\t          : new BigInteger('1000000'),\n\n  'cMinOffset'            : -96,\n  'cMaxOffset'            : 80,\n\n  'VER_NONE'              : 1,\n  'VER_NODE_PUBLIC'       : 28,\n  'VER_NODE_PRIVATE'      : 32,\n  'VER_ACCOUNT_ID'        : 0,\n  'VER_ACCOUNT_PUBLIC'    : 35,\n  'VER_ACCOUNT_PRIVATE'   : 34,\n  'VER_FAMILY_GENERATOR'  : 41,\n  'VER_FAMILY_SEED'       : 33,\n};\n\n// --> input: big-endian array of bytes.\n// <-- string at least as long as input.\nvar encode_base = function (input, alphabet) {\n  var alphabet\t= alphabets[alphabet || 'ripple'];\n  var bi_base\t= new BigInteger(String(alphabet.length));\n  var bi_q\t= nbi();\n  var bi_r\t= nbi();\n  var bi_value\t= new BigInteger(input);\n  var buffer\t= [];\n\n  while (bi_value.compareTo(BigInteger.ZERO) > 0)\n  {\n    bi_value.divRemTo(bi_base, bi_q, bi_r);\n    bi_q.copyTo(bi_value);\n\n    buffer.push(alphabet[bi_r.intValue()]);\n  }\n\n  var i;\n\n  for (i = 0; i != input.length && !input[i]; i += 1) {\n    buffer.push(alphabet[0]);\n  }\n\n  return buffer.reverse().join(\"\");\n};\n\n// --> input: String\n// <-- array of bytes or undefined.\nvar decode_base = function (input, alphabet) {\n  var alphabet\t= alphabets[alphabet || 'ripple'];\n  var bi_base\t= new BigInteger(String(alphabet.length));\n  var bi_value\t= nbi();\n  var i;\n\n  for (i = 0; i != input.length && input[i] === alphabet[0]; i += 1)\n    ;\n\n  for (; i != input.length; i += 1) {\n    var\tv = alphabet.indexOf(input[i]);\n\n    if (v < 0)\n      return undefined;\n\n    var r = nbi();\n\n    r.fromInt(v);\n\n    bi_value  = bi_value.multiply(bi_base).add(r);\n  }\n\n  // toByteArray:\n  // - Returns leading zeros!\n  // - Returns signed bytes!\n  var bytes =  bi_value.toByteArray().map(function (b) { return b ? b < 0 ? 256+b : b : 0});\n  var extra = 0;\n\n  while (extra != bytes.length && !bytes[extra])\n    extra += 1;\n\n  if (extra)\n    bytes = bytes.slice(extra);\n\n  var zeros = 0;\n\n  while (zeros !== input.length && input[zeros] === alphabet[0])\n    zeros += 1;\n\n  return [].concat(utils.arraySet(zeros, 0), bytes);\n};\n\nvar sha256  = function (bytes) {\n  return sjcl.codec.bytes.fromBits(sjcl.hash.sha256.hash(sjcl.codec.bytes.toBits(bytes)));\n};\n\nvar sha256hash = function (bytes) {\n  return sha256(sha256(bytes));\n};\n\n// --> input: Array\n// <-- String\nvar encode_base_check = function (version, input, alphabet) {\n  var buffer  = [].concat(version, input);\n  var check   = sha256(sha256(buffer)).slice(0, 4);\n\n  return encode_base([].concat(buffer, check), alphabet);\n}\n\n// --> input : String\n// <-- NaN || BigInteger\nvar decode_base_check = function (version, input, alphabet) {\n  var buffer = decode_base(input, alphabet);\n\n  if (!buffer || buffer[0] !== version || buffer.length < 5)\n    return NaN;\n\n  var computed\t= sha256hash(buffer.slice(0, -4)).slice(0, 4);\n  var checksum\t= buffer.slice(-4);\n  var i;\n\n  for (i = 0; i != 4; i += 1)\n    if (computed[i] !== checksum[i])\n      return NaN;\n\n  return new BigInteger(buffer.slice(1, -4));\n}\n\n//\n// Seed support\n//\n\nvar Seed = function () {\n  // Internal form: NaN or BigInteger\n  this._value  = NaN;\n};\n\nSeed.json_rewrite = function (j) {\n  return Seed.from_json(j).to_json();\n};\n\n// Return a new Seed from j.\nSeed.from_json = function (j) {\n  return 'string' === typeof j\n      ? (new Seed()).parse_json(j)\n      : j.clone();\n};\n\nSeed.is_valid = function (j) {\n  return Seed.from_json(j).is_valid();\n};\n\nSeed.prototype.clone = function () {\n  return this.copyTo(new Seed());\n};\n\n// Returns copy.\nSeed.prototype.copyTo = function (d) {\n  d._value = this._value;\n\n  return d;\n};\n\nSeed.prototype.equals = function (d) {\n  return this._value instanceof BigInteger && d._value instanceof BigInteger && this._value.equals(d._value);\n};\n\nSeed.prototype.is_valid = function () {\n  return this._value instanceof BigInteger;\n};\n\n// value = NaN on error.\n// One day this will support rfc1751 too.\nSeed.prototype.parse_json = function (j) {\n  if ('string' !== typeof j) {\n    this._value  = NaN;\n  }\n  else if (j[0] === \"s\") {\n    this._value  = decode_base_check(consts.VER_FAMILY_SEED, j);\n  }\n  else if (16 === j.length) {\n    this._value  = new BigInteger(utils.stringToArray(j), 128);\n  }\n  else {\n    this._value  = NaN;\n  }\n\n  return this;\n};\n\n// Convert from internal form.\nSeed.prototype.to_json = function () {\n  if (!(this._value instanceof BigInteger))\n    return NaN;\n\n  var bytes   = this._value.toByteArray().map(function (b) { return b ? b < 0 ? 256+b : b : 0});\n  var target  = 20;\n\n  // XXX Make sure only trim off leading zeros.\n  var array = bytes.length < target\n\t\t? bytes.length\n\t\t  ? [].concat(utils.arraySet(target - bytes.length, 0), bytes)\n\t\t  : utils.arraySet(target, 0)\n\t\t: bytes.slice(target - bytes.length);\n  var output = encode_base_check(consts.VER_FAMILY_SEED, array);\n\n  return output;\n};\n\n//\n// UInt160 support\n//\n\nvar UInt160 = function () {\n  // Internal form: NaN or BigInteger\n  this._value  = NaN;\n};\n\nUInt160.json_rewrite = function (j) {\n  return UInt160.from_json(j).to_json();\n};\n\n// Return a new UInt160 from j.\nUInt160.from_generic = function (j) {\n  return 'string' === typeof j\n      ? (new UInt160()).parse_generic(j)\n      : j.clone();\n};\n\n// Return a new UInt160 from j.\nUInt160.from_json = function (j) {\n  if ('string' === typeof j) {\n    return (new UInt160()).parse_json(j);\n  } else if (j instanceof Uint160) {\n    return j.clone();\n  } else {\n    return new UInt160();\n  }\n};\n\nUInt160.is_valid = function (j) {\n  return UInt160.from_json(j).is_valid();\n};\n\nUInt160.prototype.clone = function () {\n  return this.copyTo(new UInt160());\n};\n\n// Returns copy.\nUInt160.prototype.copyTo = function (d) {\n  d._value = this._value;\n\n  return d;\n};\n\nUInt160.prototype.equals = function (d) {\n  return this._value instanceof BigInteger && d._value instanceof BigInteger && this._value.equals(d._value);\n};\n\nUInt160.prototype.is_valid = function () {\n  return this._value instanceof BigInteger;\n};\n\n// value = NaN on error.\nUInt160.prototype.parse_generic = function (j) {\n  // Canonicalize and validate\n  if (exports.config.accounts && j in exports.config.accounts)\n    j = exports.config.accounts[j].account;\n\n  switch (j) {\n    case undefined:\n    case \"0\":\n    case consts.address_xns:\n    case consts.uint160_xns:\n    case consts.hex_xns:\n      this._value  = nbi();\n      break;\n\n    case \"1\":\n    case consts.address_one:\n    case consts.uint160_one:\n    case consts.hex_one:\n      this._value  = new BigInteger([1]);\n\n      break;\n\n    default:\n      if ('string' !== typeof j) {\n\tthis._value  = NaN;\n      }\n      else if (j[0] === \"r\") {\n\tthis._value  = decode_base_check(consts.VER_ACCOUNT_ID, j);\n      }\n      else if (20 === j.length) {\n\tthis._value  = new BigInteger(utils.stringToArray(j), 256);\n      }\n      else if (40 === j.length) {\n\t// XXX Check char set!\n\tthis._value  = new BigInteger(j, 16);\n      }\n      else {\n\tthis._value  = NaN;\n      }\n  }\n\n  return this;\n};\n\n// value = NaN on error.\nUInt160.prototype.parse_json = function (j) {\n  // Canonicalize and validate\n  if (exports.config.accounts && j in exports.config.accounts)\n    j = exports.config.accounts[j].account;\n\n  if ('string' !== typeof j) {\n    this._value  = NaN;\n  }\n  else if (j[0] === \"r\") {\n    this._value  = decode_base_check(consts.VER_ACCOUNT_ID, j);\n  }\n  else {\n    this._value  = NaN;\n  }\n\n  return this;\n};\n\n// Convert from internal form.\n// XXX Json form should allow 0 and 1, C++ doesn't currently allow it.\nUInt160.prototype.to_json = function () {\n  if (!(this._value instanceof BigInteger))\n    return NaN;\n\n  var bytes   = this._value.toByteArray().map(function (b) { return b ? b < 0 ? 256+b : b : 0});\n  var target  = 20;\n\n  // XXX Make sure only trim off leading zeros.\n  var array = bytes.length < target\n\t\t? bytes.length\n\t\t  ? [].concat(utils.arraySet(target - bytes.length, 0), bytes)\n\t\t  : utils.arraySet(target, 0)\n\t\t: bytes.slice(target - bytes.length);\n  var output = encode_base_check(consts.VER_ACCOUNT_ID, array);\n\n  return output;\n};\n\n//\n// Currency support\n//\n\n// XXX Internal form should be UInt160.\nvar Currency = function () {\n  // Internal form: 0 = XRP. 3 letter-code.\n  // XXX Internal should be 0 or hex with three letter annotation when valid.\n\n  // Json form:\n  //  '', 'XRP', '0': 0\n  //  3-letter code: ...\n  // XXX Should support hex, C++ doesn't currently allow it.\n\n  this._value  = NaN;\n}\n\n// Given \"USD\" return the json.\nCurrency.json_rewrite = function (j) {\n  return Currency.from_json(j).to_json();\n};\n\nCurrency.from_json = function (j) {\n  return 'string' === typeof j\n      ? (new Currency()).parse_json(j)\n      : j.clone();\n};\n\nCurrency.is_valid = function (j) {\n  return currency.from_json(j).is_valid();\n};\n\nCurrency.prototype.clone = function() {\n  return this.copyTo(new Currency());\n};\n\n// Returns copy.\nCurrency.prototype.copyTo = function (d) {\n  d._value = this._value;\n\n  return d;\n};\n\nCurrency.prototype.equals = function (d) {\n  return ('string' !== typeof this._value && isNaN(this._value))\n    || ('string' !== typeof d._value && isNaN(d._value)) ? false : this._value === d._value;\n};\n\n// this._value = NaN on error.\nCurrency.prototype.parse_json = function (j) {\n  if (\"\" === j || \"0\" === j || \"XRP\" === j) {\n    this._value\t= 0;\n  }\n  else if ('string' != typeof j || 3 !== j.length) {\n    this._value\t= NaN;\n  }\n  else {\n    this._value\t= j;\n  }\n\n  return this;\n};\n\nCurrency.prototype.is_native = function () {\n  return !isNaN(this._value) && !this._value;\n};\n\nCurrency.prototype.is_valid = function () {\n  return !isNaN(this._value);\n};\n\nCurrency.prototype.to_json = function () {\n  return this._value ? this._value : \"XRP\";\n};\n\nCurrency.prototype.to_human = function () {\n  return this._value ? this._value : \"XRP\";\n};\n\n//\n// Amount class in the style of Java's BigInteger class\n// http://docs.oracle.com/javase/1.3/docs/api/java/math/BigInteger.html\n//\n\nvar Amount = function () {\n  // Json format:\n  //  integer : XRP\n  //  { 'value' : ..., 'currency' : ..., 'issuer' : ...}\n\n  this._value\t    = new BigInteger();\t// NaN for bad value. Always positive for non-XRP.\n  this._offset\t    = 0;\t        // Always 0 for XRP.\n  this._is_native   = true;\t\t// Default to XRP. Only valid if value is not NaN.\n  this._is_negative = false;\n\n  this._currency    = new Currency();\n  this._issuer\t    = new UInt160();\n};\n\n// Given \"100/USD/mtgox\" return the a string with mtgox remapped.\nAmount.text_full_rewrite = function (j) {\n  return Amount.from_json(j).to_text_full();\n}\n\n// Given \"100/USD/mtgox\" return the json.\nAmount.json_rewrite = function (j) {\n  return Amount.from_json(j).to_json();\n};\n\nAmount.from_json = function (j) {\n  return (new Amount()).parse_json(j);\n};\n\nAmount.from_human = function (j) {\n  return (new Amount()).parse_human(j);\n};\n\nAmount.is_valid = function (j) {\n  return Amount.from_json(j).is_valid();\n};\n\nAmount.is_valid_full = function (j) {\n  return Amount.from_json(j).is_valid_full();\n};\n\nAmount.NaN = function () {\n  var result = new Amount();\n  \n  result._value = NaN;\n  \n  return result;\n};\n\n// Returns a new value which is the absolute value of this.\nAmount.prototype.abs = function () {\n  return this.clone(this.is_negative());\n};\n\n// Result in terms of this' currency and issuer.\nAmount.prototype.add = function (v) {\n  var result;\n\n  if (!this.is_comparable(v)) {\n    result              = Amount.NaN();\n  }\n  else if (this._is_native) {\n    result              = new Amount();\n\n    var v1  = this._is_negative ? this._value.negate() : this._value;\n    var v2  = v._is_negative ? v._value.negate() : v._value;\n    var s   = v1.add(v2);\n\n    result._is_negative = s.compareTo(BigInteger.ZERO) < 0;\n    result._value       = result._is_negative ? s.negate() : s;\n  }\n  else {\n    var v1  = this._is_negative ? this._value.negate() : this._value;\n    var o1  = this._offset;\n    var v2  = v._is_negative ? v._value.negate() : v._value;\n    var o2  = v._offset;\n\n    while (o1 < o2) {\n      v1  = v1.divide(consts.bi_10);\n      o1  += 1;\n    }\n\n    while (o2 < o1) {\n      v2  = v2.divide(consts.bi_10);\n      o2  += 1;\n    }\n\n    result              = new Amount();\n    result._is_native   = false;\n    result._offset      = o1;\n    result._value       = v1.add(v2);\n    result._is_negative = result._value.compareTo(BigInteger.ZERO) < 0;\n    \n    if (result._is_negative) {\n      result._value       = result._value.negate();\n      result._is_negative = false;\n    }\n\n    result._currency    = this._currency.clone();\n    result._issuer      = this._issuer.clone();\n\n    result.canonicalize();\n  }\n\n  return result;\n};\n\nAmount.prototype.canonicalize = function () {\n  if (!(this._value instanceof BigInteger))\n  {\n    // NaN.\n    // nothing\n  }\n  else if (this._is_native) {\n    // Native.\n\n    if (this._value.equals(BigInteger.ZERO)) {\n      this._offset      = 0;\n      this._is_negative = false;\n    }\n    else {\n      // Normalize _offset to 0.\n\n      while (this._offset < 0) {\n        this._value  = this._value.divide(consts.bi_10);\n        this._offset += 1;\n      }\n\n      while (this._offset > 0) {\n        this._value  = this._value.multiply(consts.bi_10);\n        this._offset -= 1;\n      }\n    }\n\n    // XXX Make sure not bigger than supported. Throw if so.\n  }\n  else if (this.is_zero()) {\n    this._offset      = -100;\n    this._is_negative = false;\n  }\n  else\n  {\n    // Normalize mantissa to valid range.\n\n    while (this._value.compareTo(consts.bi_man_min_value) < 0) {\n      this._value  = this._value.multiply(consts.bi_10);\n      this._offset -= 1;\n    }\n\n    while (this._value.compareTo(consts.bi_man_max_value) > 0) {\n      this._value  = this._value.divide(consts.bi_10);\n      this._offset += 1;\n    }\n  }\n\n  return this;\n};\n\nAmount.prototype.clone = function (negate) {\n  return this.copyTo(new Amount(), negate);\n};\n\nAmount.prototype.compareTo = function (v) {\n  var result;\n\n  if (!this.is_comparable(v)) {\n    result  = Amount.NaN();\n  }\n  else if (this._is_native) {\n    result  = this._value.compareTo(v._value);\n\n    if (result > 1)\n      result  = 1;\n    else if (result < -1)\n      result  = -1;\n  }\n  else if (this._is_negative !== v._is_negative) {\n    result  = this._is_negative ? -1 : 1;\n  }\n  else if (this._value.equals(BigInteger.ZERO)) {\n    result  = v._is_negative\n                ? 1\n                : v._value.equals(BigInteger.ZERO)\n                  ? 0\n                  : 1;\n  }\n  else if (v._value.equals(BigInteger.ZERO)) {\n    result  = 1;\n  }\n  else if (this._offset > v._offset) {\n    result  = this._is_negative ? -1 : 1;\n  }\n  else if (this._offset < v._offset) {\n    result  = this._is_negative ? 1 : -1;\n  }\n  else {\n    result  = this._value.compareTo(v._value);\n\n    if (result > 1)\n      result  = 1;\n    else if (result < -1)\n      result  = -1;\n  }\n\n  return result;\n};\n\n// Returns copy.\nAmount.prototype.copyTo = function (d, negate) {\n  if ('object' === typeof this._value)\n  {\n    this._value.copyTo(d._value);\n  }\n  else\n  {\n    d._value   = this._value;\n  }\n\n  d._offset\t  = this._offset;\n  d._is_native\t  = this._is_native;\n  d._is_negative  = negate\n\t\t\t? !this._is_negative    // Negating.\n\t\t\t: this._is_negative;    // Just copying.\n\n  this._currency.copyTo(d._currency);\n  this._issuer.copyTo(d._issuer);\n\n  return d;\n};\n\nAmount.prototype.currency = function () {\n  return this._currency;\n};\n\n// Check BigInteger NaN\n// Checks currency, does not check issuer.\nAmount.prototype.equals = function (d) {\n  return 'string' === typeof (d)\n    ? this.equals(Amount.from_json(d))\n    : this === d\n      || (d instanceof Amount\n\t&& this._is_native === d._is_native\n\t&& (this._is_native\n\t    ? this._value.equals(d._value)\n\t    : this._currency.equals(d._currency)\n\t      ? this._is_negative === d._is_negative\n\t\t? this._value.equals(d._value)\n\t\t: this._value.equals(BigInteger.ZERO) && d._value.equals(BigInteger.ZERO)\n\t      : false));\n};\n\n// Result in terms of this' currency and issuer.\nAmount.prototype.divide = function (d) {\n  var result;\n\n  if (d.is_zero()) {\n    throw \"divide by zero\";\n  }\n  else if (this.is_zero()) {\n    result = this.clone();\n  }\n  else if (!this.is_valid()) {\n    throw new Error(\"Invalid dividend\");\n  }\n  else if (!d.is_valid()) {\n    throw new Error(\"Invalid divisor\");\n  }\n  else {\n    result              = new Amount();\n    result._offset      = this._offset - d._offset - 17;\n    result._value       = this._value.multiply(consts.bi_1e17).divide(d._value).add(consts.bi_5);\n    result._is_native   = this._is_native;\n    result._is_negative = this._is_negative !== d._is_negative;\n    result._currency    = this._currency.clone();\n    result._issuer      = this._issuer.clone();\n\n    result.canonicalize();\n  }\n\n  return result;\n};\n\n/**\n * Calculate a ratio between two amounts.\n *\n * This function calculates a ratio - such as a price - between two Amount\n * objects.\n *\n * The return value will have the same type (currency) as the numerator. This is\n * a simplification, which should be sane in most cases. For example, a USD/XRP\n * price would be rendered as USD.\n *\n * @example\n *   var price = buy_amount.ratio_human(sell_amount);\n *\n * @this {Amount} The numerator (top half) of the fraction.\n * @param {Amount} denominator The denominator (bottom half) of the fraction.\n * @return {Amount} The resulting ratio. Unit will be the same as numerator.\n */\nAmount.prototype.ratio_human = function (denominator) {\n  var numerator = this;\n  denominator = Amount.from_json(denominator);\n\n  // Special case: The denominator is a native (XRP) amount.\n  //\n  // In that case, it's going to be expressed as base units (1 XRP =\n  // 10^xns_precision base units).\n  //\n  // However, the unit of the denominator is lost, so when the resulting ratio\n  // is printed, the ratio is going to be too small by a factor of\n  // 10^xns_precision.\n  //\n  // To compensate, we multiply the numerator by 10^xns_precision.\n  if (denominator._is_native) {\n    numerator = numerator.clone();\n    numerator._value = numerator._value.multiply(consts.bi_xns_unit);\n  }\n\n  return numerator.divide(denominator);\n};\n\n/**\n * Calculate a product of two amounts.\n *\n * This function allows you to calculate a product between two amounts which\n * retains XRPs human/external interpretation (i.e. 1 XRP = 1,000,000 base\n * units).\n *\n * Intended use is to calculate something like: 10 USD * 10 XRP/USD = 100 XRP\n *\n * @example\n *   var sell_amount = buy_amount.product_human(price);\n *\n * @see Amount#ratio_human\n *\n * @this {Amount} The first factor of the product.\n * @param {Amount} factor The second factor of the product.\n * @return {Amount} The product. Unit will be the same as the first factor.\n */\nAmount.prototype.product_human = function (factor) {\n  factor = Amount.from_json(factor);\n\n  var product = this.multiply(factor);\n\n  // Special case: The second factor is a native (XRP) amount expressed as base\n  // units (1 XRP = 10^xns_precision base units).\n  //\n  // See also Amount#ratio_human.\n  if (factor._is_native) {\n    product._value = product._value.divide(consts.bi_xns_unit);\n  }\n\n  return product;\n}\n\n// True if Amounts are valid and both native or non-native.\nAmount.prototype.is_comparable = function (v) {\n  return this._value instanceof BigInteger\n    && v._value instanceof BigInteger\n    && this._is_native === v._is_native;\n};\n\nAmount.prototype.is_native = function () {\n  return this._is_native;\n};\n\nAmount.prototype.is_negative = function () {\n  return this._value instanceof BigInteger\n          ? this._is_negative\n          : false;                          // NaN is not negative\n};\n\n// Only checks the value. Not the currency and issuer.\nAmount.prototype.is_valid = function () {\n  return this._value instanceof BigInteger;\n};\n\nAmount.prototype.is_valid_full = function () {\n  return this.is_valid() && this._currency.is_valid() && this._issuer.is_valid();\n};\n\nAmount.prototype.is_zero = function () {\n  return this._value instanceof BigInteger\n          ? this._value.equals(BigInteger.ZERO)\n          : false;\n};\n\nAmount.prototype.issuer = function () {\n  return this._issuer;\n};\n\n// Result in terms of this' currency and issuer.\nAmount.prototype.multiply = function (v) {\n  var result;\n\n if (this.is_zero()) {\n    result = this.clone();\n  }\n  else if (v.is_zero()) {\n    result = this.clone();\n    result._value = BigInteger.ZERO.clone();\n  }\n  else {\n    var v1 = this._value;\n    var o1 = this._offset;\n    var v2 = v._value;\n    var o2 = v._offset;\n\n    while (v1.compareTo(consts.bi_man_min_value) < 0 ) {\n      v1 = v1.multiply(consts.bi_10);\n      o1 -= 1;\n    }\n\n    while (v2.compareTo(consts.bi_man_min_value) < 0 ) {\n      v2 = v2.multiply(consts.bi_10);\n      o2 -= 1;\n    }\n\n    result              = new Amount();\n    result._offset      = o1 + o2 + 14;\n    result._value       = v1.multiply(v2).divide(consts.bi_1e14).add(consts.bi_7);\n    result._is_native   = this._is_native;\n    result._is_negative = this._is_negative !== v._is_negative;\n    result._currency    = this._currency.clone();\n    result._issuer      = this._issuer.clone();\n\n    result.canonicalize();\n  }\n\n  return result;\n};\n\n// Return a new value.\nAmount.prototype.negate = function () {\n  return this.clone('NEGATE');\n};\n\n/**\n * Tries to correctly interpret an amount as entered by a user.\n *\n * Examples:\n *\n *   XRP 250     => 250000000/XRP\n *   25.2 XRP    => 25200000/XRP\n *   USD 100.40  => 100.4/USD/?\n *   100         => 100000000/XRP\n */\nAmount.prototype.parse_human = function (j) {\n  // Cast to string\n  j = \"\"+j;\n\n  // Parse\n  var m = j.match(/^\\s*([a-z]{3})?\\s*(-)?(\\d+)(?:\\.(\\d*))?\\s*([a-z]{3})?\\s*$/i);\n\n  if (m) {\n    var currency   = m[1] || m[5] || \"XRP\",\n        integer    = m[3] || \"0\",\n        fraction   = m[4] || \"\",\n        precision  = null;\n\n    currency = currency.toUpperCase();\n\n    this._value = new BigInteger(integer);\n    this.set_currency(currency);\n\n    // XRP have exactly six digits of precision\n    if (currency === 'XRP') {\n      fraction = fraction.slice(0, 6);\n      while (fraction.length < 6) {\n        fraction += \"0\";\n      }\n      this._is_native   = true;\n      this._value       = this._value.multiply(consts.bi_xns_unit).add(new BigInteger(fraction));\n    }\n    // Other currencies have arbitrary precision\n    else {\n      while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.slice(0, fraction.length - 1);\n      }\n\n      precision = fraction.length;\n\n      this._is_native   = false;\n      var multiplier    = consts.bi_10.clone().pow(precision);\n      this._value      \t= this._value.multiply(multiplier).add(new BigInteger(fraction));\n      this._offset     \t= -precision;\n\n      this.canonicalize();\n    }\n\n    this._is_negative = !!m[2];\n  } else {\n    this._value\t      = NaN;\n  }\n\n  return this;\n};\n\nAmount.prototype.parse_issuer = function (issuer) {\n  this._issuer.parse_json(issuer);\n\n  return this;\n};\n\n// <-> j\nAmount.prototype.parse_json = function (j) {\n  if ('string' === typeof j) {\n    // .../.../... notation is not a wire format.  But allowed for easier testing.\n    var\tm = j.match(/^(.+)\\/(...)\\/(.+)$/);\n\n    if (m) {\n      this._currency  = Currency.from_json(m[2]);\n      this._issuer    = UInt160.from_json(m[3]);\n      this.parse_value(m[1]);\n    }\n    else {\n      this.parse_native(j);\n      this._currency  = new Currency();\n      this._issuer    = new UInt160();\n    }\n  }\n  else if ('object' === typeof j && j instanceof Amount) {\n    j.copyTo(this);\n  }\n  else if ('object' === typeof j && 'value' in j) {\n    // Parse the passed value to sanitize and copy it.\n\n    this._currency.parse_json(j.currency);     // Never XRP.\n    if (\"string\" === typeof j.issuer) this._issuer.parse_json(j.issuer);\n    this.parse_value(j.value);\n  }\n  else {\n    this._value\t    = NaN;\n  }\n\n  return this;\n};\n\n// Parse a XRP value from untrusted input.\n// - integer = raw units\n// - float = with precision 6\n// XXX Improvements: disallow leading zeros.\nAmount.prototype.parse_native = function (j) {\n  var m;\n\n  if ('string' === typeof j)\n    m = j.match(/^(-?)(\\d+)(\\.\\d{0,6})?$/);\n\n  if (m) {\n    if (undefined === m[3]) {\n      // Integer notation\n\n      this._value\t  = new BigInteger(m[2]);\n    }\n    else {\n      // Float notation : values multiplied by 1,000,000.\n\n      var   int_part\t  = (new BigInteger(m[2])).multiply(consts.bi_xns_unit);\n      var   fraction_part = (new BigInteger(m[3])).multiply(new BigInteger(String(Math.pow(10, 1+consts.xns_precision-m[3].length))));\n\n      this._value\t  = int_part.add(fraction_part);\n    }\n\n    this._is_native   = true;\n    this._offset      = 0;\n    this._is_negative = !!m[1] && this._value.compareTo(BigInteger.ZERO) !== 0;\n\n    if (this._value.compareTo(consts.bi_xns_max) > 0)\n    {\n      this._value\t  = NaN;\n    }\n  }\n  else {\n    this._value\t      = NaN;\n  }\n\n  return this;\n};\n\n// Parse a non-native value for the json wire format.\n// Requires _currency to be set!\nAmount.prototype.parse_value = function (j) {\n  this._is_native    = false;\n\n  if ('number' === typeof j) {\n    this._is_negative = j < 0;\n    this._value\t      = new BigInteger(this._is_negative ? -j : j);\n    this._offset      = 0;\n\n    this.canonicalize();\n  }\n  else if ('string' === typeof j) {\n    var\ti = j.match(/^(-?)(\\d+)$/);\n    var\td = !i && j.match(/^(-?)(\\d+)\\.(\\d*)$/);\n    var\te = !e && j.match(/^(-?)(\\d+)e(-?\\d+)$/);\n\n    if (e) {\n      // e notation\n\n      this._value\t= new BigInteger(e[2]);\n      this._offset \t= parseInt(e[3]);\n      this._is_negative\t= !!e[1];\n\n      this.canonicalize();\n    }\n    else if (d) {\n      // float notation\n\n      var integer\t= new BigInteger(d[2]);\n      var fraction    \t= new BigInteger(d[3]);\n      var precision\t= d[3].length;\n\n      this._value      \t= integer.multiply(consts.bi_10.clone().pow(precision)).add(fraction);\n      this._offset     \t= -precision;\n      this._is_negative = !!d[1];\n\n      this.canonicalize();\n    }\n    else if (i) {\n      // integer notation\n\n      this._value\t= new BigInteger(i[2]);\n      this._offset \t= 0;\n      this._is_negative  = !!i[1];\n\n      this.canonicalize();\n    }\n    else {\n      this._value\t= NaN;\n    }\n  }\n  else if (j instanceof BigInteger) {\n    this._value\t      = j.clone();\n  }\n  else {\n    this._value\t      = NaN;\n  }\n\n  return this;\n};\n\nAmount.prototype.set_currency = function (c) {\n  if ('string' === typeof c) {\n    this._currency.parse_json(c);  \n  }\n  else\n  {\n    c.copyTo(this._currency);\n  }\n\n  return this;\n};\n\nAmount.prototype.set_issuer = function (issuer) {\n  if (issuer instanceof UInt160) {\n    issuer.copyTo(this._issuer);\n  } else {\n    this._issuer.parse_json(issuer);\n  }\n\n  return this;\n};\n\n// Result in terms of this' currency and issuer.\nAmount.prototype.subtract = function (v) {\n  // Correctness over speed, less code has less bugs, reuse add code.\n  return this.add(v.negate());\n};\n\nAmount.prototype.to_number = function (allow_nan) {\n  var s = this.to_text(allow_nan);\n\n  return ('string' === typeof s) ? Number(s) : s;\n}\n\n// Convert only value to JSON wire format.\nAmount.prototype.to_text = function (allow_nan) {\n  if (!(this._value instanceof BigInteger)) {\n    // Never should happen.\n    return allow_nan ? NaN : \"0\";\n  }\n  else if (this._is_native) {\n    if (this._value.compareTo(consts.bi_xns_max) > 0)\n    {\n      // Never should happen.\n      return allow_nan ? NaN : \"0\";\n    }\n    else\n    {\n      return (this._is_negative ? \"-\" : \"\") + this._value.toString();\n    }\n  }\n  else if (this.is_zero())\n  {\n    return \"0\";\n  }\n  else if (this._offset < -25 || this._offset > -4)\n  {\n    // Use e notation.\n    // XXX Clamp output.\n\n    return (this._is_negative ? \"-\" : \"\") + this._value.toString() + \"e\" + this._offset;\n  }\n  else\n  {\n    var val = \"000000000000000000000000000\" + this._value.toString() + \"00000000000000000000000\";\n    var\tpre = val.substring(0, this._offset + 43);\n    var\tpost = val.substring(this._offset + 43);\n    var\ts_pre = pre.match(/[1-9].*$/);\t  // Everything but leading zeros.\n    var\ts_post = post.match(/[1-9]0*$/);  // Last non-zero plus trailing zeros.\n\n    return (this._is_negative ? \"-\" : \"\")\n      + (s_pre ? s_pre[0] : \"0\")\n      + (s_post ? \".\" + post.substring(0, 1+post.length-s_post[0].length) : \"\");\n  }\n};\n\n/**\n * Format only value in a human-readable format.\n *\n * @example\n *   var pretty = amount.to_human({precision: 2});\n *\n * @param opts Options for formatter.\n * @param opts.precision {Number} Max. number of digits after decimal point.\n * @param opts.min_precision {Number} Min. number of digits after dec. point.\n * @param opts.skip_empty_fraction {Boolean} Don't show fraction if it is zero,\n *   even if min_precision is set.\n * @param opts.group_sep {Boolean|String} Whether to show a separator every n\n *   digits, if a string, that value will be used as the separator. Default: \",\"\n * @param opts.group_width {Number} How many numbers will be grouped together,\n *   default: 3.\n * @param opts.signed {Boolean|String} Whether negative numbers will have a\n *   prefix. If String, that string will be used as the prefix. Default: \"-\"\n */\nAmount.prototype.to_human = function (opts)\n{\n  opts = opts || {};\n\n  if (!this.is_valid()) return \"\";\n\n  // Default options\n  if (\"undefined\" === typeof opts.signed) opts.signed = true;\n  if (\"undefined\" === typeof opts.group_sep) opts.group_sep = true;\n  opts.group_width = opts.group_width || 3;\n\n  var order = this._is_native ? consts.xns_precision : -this._offset;\n  var denominator = consts.bi_10.clone().pow(order);\n  var int_part = this._value.divide(denominator).toString(10);\n  var fraction_part = this._value.mod(denominator).toString(10);\n\n  // Add leading zeros to fraction\n  while (fraction_part.length < order) {\n    fraction_part = \"0\" + fraction_part;\n  }\n\n  int_part = int_part.replace(/^0*/, '');\n  fraction_part = fraction_part.replace(/0*$/, '');\n\n  if (fraction_part.length || !opts.skip_empty_fraction) {\n    if (\"number\" === typeof opts.precision) {\n      fraction_part = fraction_part.slice(0, opts.precision);\n    }\n\n    if (\"number\" === typeof opts.min_precision) {\n      while (fraction_part.length < opts.min_precision) {\n        fraction_part += \"0\";\n      }\n    }\n  }\n\n  if (opts.group_sep) {\n    if (\"string\" !== typeof opts.group_sep) {\n      opts.group_sep = ',';\n    }\n    int_part = utils.chunkString(int_part, opts.group_width, true).join(opts.group_sep);\n  }\n\n  var formatted = '';\n  if (opts.signed && this._is_negative) {\n    if (\"string\" !== typeof opts.signed) {\n      opts.signed = '-';\n    }\n    formatted += opts.signed;\n  }\n  formatted += int_part.length ? int_part : '0';\n  formatted += fraction_part.length ? '.'+fraction_part : '';\n\n  return formatted;\n};\n\nAmount.prototype.to_json = function () {\n  if (this._is_native) {\n    return this.to_text();\n  }\n  else\n  {\n    var amount_json = {\n      'value' : this.to_text(),\n      'currency' : this._currency.to_json()\n    };\n    if (this._issuer.is_valid()) {\n      amount_json.issuer = this._issuer.to_json();\n    }\n    return amount_json;\n  }\n};\n\nAmount.prototype.to_text_full = function () {\n  return this._value instanceof BigInteger\n    ? this._is_native\n      ? this.to_text() + \"/XRP\"\n      : this.to_text() + \"/\" + this._currency.to_json() + \"/\" + this._issuer.to_json()\n    : NaN;\n};\n\n// For debugging.\nAmount.prototype.not_equals_why = function (d) {\n  return 'string' === typeof (d)\n    ? this.not_equals_why(Amount.from_json(d))\n    : this === d\n      ? false\n      : d instanceof Amount\n\t  ? this._is_native === d._is_native\n\t    ? this._is_native\n\t\t? this._value.equals(d._value)\n\t\t  ? false\n\t\t  : \"XRP value differs.\"\n\t\t: this._currency.equals(d._currency)\n\t\t  ? this._is_negative === d._is_negative\n\t\t    ? this._value.equals(d._value)\n\t\t      ? false\n\t\t      : this._value.equals(BigInteger.ZERO) && d._value.equals(BigInteger.ZERO)\n\t\t\t? false\n\t\t\t: \"Non-XRP value differs.\"\n\t\t    : \"Non-XRP sign differs.\"\n\t\t  : \"Non-XRP currency differs (\" + JSON.stringify(this._currency) + \"/\" + JSON.stringify(d._currency) + \")\"\n\t    : \"Native mismatch\"\n\t  : \"Wrong constructor.\"\n};\n\nexports.Amount\t      = Amount;\nexports.Currency      = Currency;\nexports.Seed          = Seed;\nexports.UInt160\t      = UInt160;\n\nexports.config\t      = {};\n\n// vim:sw=2:sts=2:ts=8:et\n\n\n// WEBPACK FOOTER //\n// module.id = 2\n// module.realId = 2\n// module.chunks = main\n//@ sourceURL=webpack-module:///./amount.js");

/******/},
/******/
/******/3: function(module, exports, require) {

/******/ /* WEBPACK FREE VAR INJECTION */ (function(console) {
eval("Function.prototype.method = function(name,func) {\n  this.prototype[name] = func;\n\n  return this;\n};\n\nvar filterErr = function(code, done) {\n  return function(e) {\n      done(e.code !== code ? e : undefined);\n    };\n};\n\nvar throwErr = function(done) {\n  return function(e) {\n      if (e)\n\tthrow e;\n      \n      done();\n    };\n};\n \nvar trace = function(comment, func) {\n  return function() {\n      console.log(\"%s: %s\", trace, arguments.toString);\n      func(arguments);\n    };\n};\n\nvar arraySet = function (count, value) {\n  var a = new Array(count);\n  var i;\n\n  for (i = 0; i != count; i += 1)\n    a[i] = value;\n\n  return a;\n};\n\nvar hexToString = function (h) {\n  var\ta = [];\n  var\ti = 0;\n\n  if (h.length % 2) {\n    a.push(String.fromCharCode(parseInt(h.substring(0, 1), 16)));\n    i = 1;\n  }\n\n  for (; i != h.length; i += 2) {\n    a.push(String.fromCharCode(parseInt(h.substring(i, i+2), 16)));\n  }\n  \n  return a.join(\"\");\n};\n\nvar stringToHex = function (s) {\n  return Array.prototype.map.call(s, function (c) {\n      var b = c.charCodeAt(0);\n\n      return b < 16 ? \"0\" + b.toString(16) : b.toString(16);\n    }).join(\"\");\n};\n\nvar stringToArray = function (s) {\n  var a = new Array(s.length);\n  var i;\n\n  for (i = 0; i != a.length; i += 1)\n    a[i] = s.charCodeAt(i);\n\n  return a;\n};\n\nvar hexToArray = function (h) {\n  return stringToArray(hexToString(h));\n}\n\nvar chunkString = function (str, n, leftAlign) {\n  var ret = [];\n  var i=0, len=str.length;\n  if (leftAlign) {\n    i = str.length % n;\n    if (i) ret.push(str.slice(0, i));\n  }\n  for(; i < len; i += n) {\n    ret.push(str.slice(i, n+i));\n  }\n  return ret;\n};\n\nvar logObject = function (msg, obj) {\n  console.log(msg, JSON.stringify(obj, undefined, 2));\n};\n\nvar assert = function (assertion, msg) {\n  if (!assertion) {\n    throw new Error(\"Assertion failed\" + (msg ? \": \"+msg : \".\"));\n  }\n};\n\nexports.trace         = trace;\nexports.arraySet      = arraySet;\nexports.hexToString   = hexToString;\nexports.hexToArray    = hexToArray;\nexports.stringToArray = stringToArray;\nexports.stringToHex   = stringToHex;\nexports.chunkString   = chunkString;\nexports.logObject     = logObject;\nexports.assert        = assert;\n\n// vim:sw=2:sts=2:ts=8:et\n\n\n// WEBPACK FOOTER //\n// module.id = 8\n// module.realId = 3\n// module.chunks = main\n//@ sourceURL=webpack-module:///./utils.js");
/******/ /* WEBPACK FREE VAR INJECTION */ }(require(/* __webpack_console */1)))

/******/},
/******/
/******/4: function(module, exports, require) {

eval("/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape */\n\n/** @namespace The Stanford Javascript Crypto Library, top-level namespace. */\nvar sjcl = {\n  /** @namespace Symmetric ciphers. */\n  cipher: {},\n\n  /** @namespace Hash functions.  Right now only SHA256 is implemented. */\n  hash: {},\n\n  /** @namespace Key exchange functions.  Right now only SRP is implemented. */\n  keyexchange: {},\n  \n  /** @namespace Block cipher modes of operation. */\n  mode: {},\n\n  /** @namespace Miscellaneous.  HMAC and PBKDF2. */\n  misc: {},\n  \n  /**\n   * @namespace Bit array encoders and decoders.\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /** @namespace Exceptions. */\n  exception: {\n    /** @class Ciphertext is corrupt. */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /** @class Invalid parameter. */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /** @class Bug or missing feature in SJCL. */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /** @class Something isn't ready. */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n\nif(typeof module != 'undefined' && module.exports){\n  module.exports = sjcl;\n}\n\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Arrays of bits, encoded as arrays of Numbers.\n *\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} length The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var out, i, last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [0] _end Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n \n/** @namespace UTF-8 strings */\nsjcl.codec.utf8String = {\n  /** Convert from a bitArray to a UTF-8 string. */\n  fromBits: function (arr) {\n    var out = \"\", bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      out += String.fromCharCode(tmp >>> 24);\n      tmp <<= 8;\n    }\n    return decodeURIComponent(escape(out));\n  },\n  \n  /** Convert from a UTF-8 string to a bitArray. */\n  toBits: function (str) {\n    str = unescape(encodeURIComponent(str));\n    var out = [], i, tmp=0;\n    for (i=0; i<str.length; i++) {\n      tmp = tmp << 8 | str.charCodeAt(i);\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Hexadecimal */\nsjcl.codec.hex = {\n  /** Convert from a bitArray to a hex string. */\n  fromBits: function (arr) {\n    var out = \"\", i, x;\n    for (i=0; i<arr.length; i++) {\n      out += ((arr[i]|0)+0xF00000000000).toString(16).substr(4);\n    }\n    return out.substr(0, sjcl.bitArray.bitLength(arr)/4);//.replace(/(.{8})/g, \"$1 \");\n  },\n  /** Convert from a hex string to a bitArray. */\n  toBits: function (str) {\n    var i, out=[], len;\n    str = str.replace(/\\s|0x/g, \"\");\n    len = str.length;\n    str = str + \"00000000\";\n    for (i=0; i<str.length; i+=8) {\n      out.push(parseInt(str.substr(i,8),16)^0);\n    }\n    return sjcl.bitArray.clamp(out, len*4);\n  }\n};\n\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Base64 encoding/decoding */\nsjcl.codec.base64 = {\n  /** The base64 alphabet.\n   * @private\n   */\n  _chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n  \n  /** Convert from a bitArray to a base64 string. */\n  fromBits: function (arr, _noEquals, _url) {\n    var out = \"\", i, bits=0, c = sjcl.codec.base64._chars, ta=0, bl = sjcl.bitArray.bitLength(arr);\n    if (_url) c = c.substr(0,62) + '-_';\n    for (i=0; out.length * 6 < bl; ) {\n      out += c.charAt((ta ^ arr[i]>>>bits) >>> 26);\n      if (bits < 6) {\n        ta = arr[i] << (6-bits);\n        bits += 26;\n        i++;\n      } else {\n        ta <<= 6;\n        bits -= 6;\n      }\n    }\n    while ((out.length & 3) && !_noEquals) { out += \"=\"; }\n    return out;\n  },\n  \n  /** Convert from a base64 string to a bitArray */\n  toBits: function(str, _url) {\n    str = str.replace(/\\s|=/g,'');\n    var out = [], i, bits=0, c = sjcl.codec.base64._chars, ta=0, x;\n    if (_url) c = c.substr(0,62) + '-_';\n    for (i=0; i<str.length; i++) {\n      x = c.indexOf(str.charAt(i));\n      if (x < 0) {\n        throw new sjcl.exception.invalid(\"this isn't base64!\");\n      }\n      if (bits > 26) {\n        bits -= 26;\n        out.push(ta ^ x>>>bits);\n        ta  = x << (32-bits);\n      } else {\n        bits += 6;\n        ta ^= x << (32-bits);\n      }\n    }\n    if (bits&56) {\n      out.push(sjcl.bitArray.partial(bits&56, ta, 1));\n    }\n    return out;\n  }\n};\n\nsjcl.codec.base64url = {\n  fromBits: function (arr) { return sjcl.codec.base64.fromBits(arr,1,1); },\n  toBits: function (str) { return sjcl.codec.base64.toBits(str,1); }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Arrays of bytes */\nsjcl.codec.bytes = {\n  /** Convert from a bitArray to an array of bytes. */\n  fromBits: function (arr) {\n    var out = [], bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      out.push(tmp >>> 24);\n      tmp <<= 8;\n    }\n    return out;\n  },\n  /** Convert from an array of bytes to a bitArray. */\n  toBits: function (bytes) {\n    var out = [], i, tmp=0;\n    for (i=0; i<bytes.length; i++) {\n      tmp = tmp << 8 | bytes[i];\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n * @class Secure Hash Algorithm, 256 bits.\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    for (i = 512+ol & -512; i <= nl; i+= 512) {\n      this._block(b.splice(0,16));\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    outer: for (; i<64; prime++) {\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          // not a prime\n          continue outer;\n        }\n      }\n      \n      if (i<8) {\n        this._init[i] = frac(Math.pow(prime, 1/2));\n      }\n      this._key[i] = frac(Math.pow(prime, 1/3));\n      i++;\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {  \n    var i, tmp, a, b,\n      w = words.slice(0),\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n\n/** @fileOverview Javascript SHA-1 implementation.\n *\n * Based on the implementation in RFC 3174, method 1, and on the SJCL\n * SHA-256 implementation.\n *\n * @author Quinn Slack\n */\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n * @class Secure Hash Algorithm, 160 bits.\n */\nsjcl.hash.sha1 = function (hash) {\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.sha1.hash = function (data) {\n  return (new sjcl.hash.sha1()).update(data).finalize();\n};\n\nsjcl.hash.sha1.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    for (i = this.blockSize+ol & -this.blockSize; i <= nl;\n         i+= this.blockSize) {\n      this._block(b.splice(0,16));\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n\n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-1 initialization vector.\n   * @private\n   */\n  _init:[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],\n\n  /**\n   * The SHA-1 hash key.\n   * @private\n   */\n  _key:[0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],\n\n  /**\n   * The SHA-1 logical functions f(0), f(1), ..., f(79).\n   * @private\n   */\n  _f:function(t, b, c, d) {\n    if (t <= 19) {\n      return (b & c) | (~b & d);\n    } else if (t <= 39) {\n      return b ^ c ^ d;\n    } else if (t <= 59) {\n      return (b & c) | (b & d) | (c & d);\n    } else if (t <= 79) {\n      return b ^ c ^ d;\n    }\n  },\n\n  /**\n   * Circular left-shift operator.\n   * @private\n   */\n  _S:function(n, x) {\n    return (x << n) | (x >>> 32-n);\n  },\n  \n  /**\n   * Perform one cycle of SHA-1.\n   * @param {bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {  \n    var t, tmp, a, b, c, d, e,\n    w = words.slice(0),\n    h = this._h,\n    k = this._key;\n   \n    a = h[0]; b = h[1]; c = h[2]; d = h[3]; e = h[4]; \n\n    for (t=0; t<=79; t++) {\n      if (t >= 16) {\n        w[t] = this._S(1, w[t-3] ^ w[t-8] ^ w[t-14] ^ w[t-16]);\n      }\n      tmp = (this._S(5, a) + this._f(t, b, c, d) + e + w[t] +\n             this._key[Math.floor(t/20)]) | 0;\n      e = d;\n      d = c;\n      c = this._S(30, b);\n      b = a;\n      a = tmp;\n   }\n\n   h[0] = (h[0]+a) |0;\n   h[1] = (h[1]+b) |0;\n   h[2] = (h[2]+c) |0;\n   h[3] = (h[3]+d) |0;\n   h[4] = (h[4]+e) |0;\n  }\n};\n\n/** @fileOverview Random number generator.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Random number generator\n *\n * @description\n * <p>\n * This random number generator is a derivative of Ferguson and Schneier's\n * generator Fortuna.  It collects entropy from various events into several\n * pools, implemented by streaming SHA-256 instances.  It differs from\n * ordinary Fortuna in a few ways, though.\n * </p>\n *\n * <p>\n * Most importantly, it has an entropy estimator.  This is present because\n * there is a strong conflict here between making the generator available\n * as soon as possible, and making sure that it doesn't \"run on empty\".\n * In Fortuna, there is a saved state file, and the system is likely to have\n * time to warm up.\n * </p>\n *\n * <p>\n * Second, because users are unlikely to stay on the page for very long,\n * and to speed startup time, the number of pools increases logarithmically:\n * a new pool is created when the previous one is actually used for a reseed.\n * This gives the same asymptotic guarantees as Fortuna, but gives more\n * entropy to early reseeds.\n * </p>\n *\n * <p>\n * The entire mechanism here feels pretty klunky.  Furthermore, there are\n * several improvements that should be made, including support for\n * dedicated cryptographic functions that may be present in some browsers;\n * state files in local storage; cookies containing randomness; etc.  So\n * look for improvements in future versions.\n * </p>\n */\nsjcl.random = {\n  /** Generate several random words, and return them in an array\n   * @param {Number} nwords The number of words to generate.\n   */\n  randomWords: function (nwords, paranoia) {\n    var out = [], i, readiness = this.isReady(paranoia), g;\n  \n    if (readiness === this._NOT_READY) {\n      throw new sjcl.exception.notReady(\"generator isn't seeded\");\n    } else if (readiness & this._REQUIRES_RESEED) {\n      this._reseedFromPools(!(readiness & this._READY));\n    }\n  \n    for (i=0; i<nwords; i+= 4) {\n      if ((i+1) % this._MAX_WORDS_PER_BURST === 0) {\n        this._gate();\n      }\n   \n      g = this._gen4words();\n      out.push(g[0],g[1],g[2],g[3]);\n    }\n    this._gate();\n  \n    return out.slice(0,nwords);\n  },\n  \n  setDefaultParanoia: function (paranoia) {\n    this._defaultParanoia = paranoia;\n  },\n  \n  /**\n   * Add entropy to the pools.\n   * @param data The entropic value.  Should be a 32-bit integer, array of 32-bit integers, or string\n   * @param {Number} estimatedEntropy The estimated entropy of data, in bits\n   * @param {String} source The source of the entropy, eg \"mouse\"\n   */\n  addEntropy: function (data, estimatedEntropy, source) {\n    source = source || \"user\";\n  \n    var id,\n      i, tmp,\n      t = (new Date()).valueOf(),\n      robin = this._robins[source],\n      oldReady = this.isReady(), err = 0;\n      \n    id = this._collectorIds[source];\n    if (id === undefined) { id = this._collectorIds[source] = this._collectorIdNext ++; }\n      \n    if (robin === undefined) { robin = this._robins[source] = 0; }\n    this._robins[source] = ( this._robins[source] + 1 ) % this._pools.length;\n  \n    switch(typeof(data)) {\n      \n    case \"number\":\n      if (estimatedEntropy === undefined) {\n        estimatedEntropy = 1;\n      }\n      this._pools[robin].update([id,this._eventId++,1,estimatedEntropy,t,1,data|0]);\n      break;\n      \n    case \"object\":\n      var objName = Object.prototype.toString.call(data);\n      if (objName === \"[object Uint32Array]\") {\n        tmp = [];\n        for (i = 0; i < data.length; i++) {\n          tmp.push(data[i]);\n        }\n        data = tmp;\n      } else {\n        if (objName !== \"[object Array]\") {\n          err = 1;\n        }\n        for (i=0; i<data.length && !err; i++) {\n          if (typeof(data[i]) != \"number\") {\n            err = 1;\n          }\n        }\n      }\n      if (!err) {\n        if (estimatedEntropy === undefined) {\n          /* horrible entropy estimator */\n          estimatedEntropy = 0;\n          for (i=0; i<data.length; i++) {\n            tmp= data[i];\n            while (tmp>0) {\n              estimatedEntropy++;\n              tmp = tmp >>> 1;\n            }\n          }\n        }\n        this._pools[robin].update([id,this._eventId++,2,estimatedEntropy,t,data.length].concat(data));\n      }\n      break;\n      \n    case \"string\":\n      if (estimatedEntropy === undefined) {\n       /* English text has just over 1 bit per character of entropy.\n        * But this might be HTML or something, and have far less\n        * entropy than English...  Oh well, let's just say one bit.\n        */\n       estimatedEntropy = data.length;\n      }\n      this._pools[robin].update([id,this._eventId++,3,estimatedEntropy,t,data.length]);\n      this._pools[robin].update(data);\n      break;\n      \n    default:\n      err=1;\n    }\n    if (err) {\n      throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");\n    }\n  \n    /* record the new strength */\n    this._poolEntropy[robin] += estimatedEntropy;\n    this._poolStrength += estimatedEntropy;\n  \n    /* fire off events */\n    if (oldReady === this._NOT_READY) {\n      if (this.isReady() !== this._NOT_READY) {\n        this._fireEvent(\"seeded\", Math.max(this._strength, this._poolStrength));\n      }\n      this._fireEvent(\"progress\", this.getProgress());\n    }\n  },\n  \n  /** Is the generator ready? */\n  isReady: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ (paranoia !== undefined) ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength && this._strength >= entropyRequired) {\n      return (this._poolEntropy[0] > this._BITS_PER_RESEED && (new Date()).valueOf() > this._nextReseed) ?\n        this._REQUIRES_RESEED | this._READY :\n        this._READY;\n    } else {\n      return (this._poolStrength >= entropyRequired) ?\n        this._REQUIRES_RESEED | this._NOT_READY :\n        this._NOT_READY;\n    }\n  },\n  \n  /** Get the generator's progress toward readiness, as a fraction */\n  getProgress: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ paranoia ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength >= entropyRequired) {\n      return 1.0;\n    } else {\n      return (this._poolStrength > entropyRequired) ?\n        1.0 :\n        this._poolStrength / entropyRequired;\n    }\n  },\n  \n  /** start the built-in entropy collectors */\n  startCollectors: function () {\n    if (this._collectorsStarted) { return; }\n  \n    if (window.addEventListener) {\n      window.addEventListener(\"load\", this._loadTimeCollector, false);\n      window.addEventListener(\"mousemove\", this._mouseCollector, false);\n    } else if (document.attachEvent) {\n      document.attachEvent(\"onload\", this._loadTimeCollector);\n      document.attachEvent(\"onmousemove\", this._mouseCollector);\n    }\n    else {\n      throw new sjcl.exception.bug(\"can't attach event\");\n    }\n  \n    this._collectorsStarted = true;\n  },\n  \n  /** stop the built-in entropy collectors */\n  stopCollectors: function () {\n    if (!this._collectorsStarted) { return; }\n  \n    if (window.removeEventListener) {\n      window.removeEventListener(\"load\", this._loadTimeCollector, false);\n      window.removeEventListener(\"mousemove\", this._mouseCollector, false);\n    } else if (window.detachEvent) {\n      window.detachEvent(\"onload\", this._loadTimeCollector);\n      window.detachEvent(\"onmousemove\", this._mouseCollector);\n    }\n    this._collectorsStarted = false;\n  },\n  \n  /* use a cookie to store entropy.\n  useCookie: function (all_cookies) {\n      throw new sjcl.exception.bug(\"random: useCookie is unimplemented\");\n  },*/\n  \n  /** add an event listener for progress or seeded-ness. */\n  addEventListener: function (name, callback) {\n    this._callbacks[name][this._callbackI++] = callback;\n  },\n  \n  /** remove an event listener for progress or seeded-ness */\n  removeEventListener: function (name, cb) {\n    var i, j, cbs=this._callbacks[name], jsTemp=[];\n  \n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n  \n    for (j in cbs) {\n\tif (cbs.hasOwnProperty(j) && cbs[j] === cb) {\n        jsTemp.push(j);\n      }\n    }\n  \n    for (i=0; i<jsTemp.length; i++) {\n      j = jsTemp[i];\n      delete cbs[j];\n    }\n  },\n  \n  /* private */\n  _pools                   : [new sjcl.hash.sha256()],\n  _poolEntropy             : [0],\n  _reseedCount             : 0,\n  _robins                  : {},\n  _eventId                 : 0,\n  \n  _collectorIds            : {},\n  _collectorIdNext         : 0,\n  \n  _strength                : 0,\n  _poolStrength            : 0,\n  _nextReseed              : 0,\n  _key                     : [0,0,0,0,0,0,0,0],\n  _counter                 : [0,0,0,0],\n  _cipher                  : undefined,\n  _defaultParanoia         : 6,\n  \n  /* event listener stuff */\n  _collectorsStarted       : false,\n  _callbacks               : {progress: {}, seeded: {}},\n  _callbackI               : 0,\n  \n  /* constants */\n  _NOT_READY               : 0,\n  _READY                   : 1,\n  _REQUIRES_RESEED         : 2,\n\n  _MAX_WORDS_PER_BURST     : 65536,\n  _PARANOIA_LEVELS         : [0,48,64,96,128,192,256,384,512,768,1024],\n  _MILLISECONDS_PER_RESEED : 30000,\n  _BITS_PER_RESEED         : 80,\n  \n  /** Generate 4 random words, no reseed, no gate.\n   * @private\n   */\n  _gen4words: function () {\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n    return this._cipher.encrypt(this._counter);\n  },\n  \n  /* Rekey the AES instance with itself after a request, or every _MAX_WORDS_PER_BURST words.\n   * @private\n   */\n  _gate: function () {\n    this._key = this._gen4words().concat(this._gen4words());\n    this._cipher = new sjcl.cipher.aes(this._key);\n  },\n  \n  /** Reseed the generator with the given words\n   * @private\n   */\n  _reseed: function (seedWords) {\n    this._key = sjcl.hash.sha256.hash(this._key.concat(seedWords));\n    this._cipher = new sjcl.cipher.aes(this._key);\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n  },\n  \n  /** reseed the data from the entropy pools\n   * @param full If set, use all the entropy pools in the reseed.\n   */\n  _reseedFromPools: function (full) {\n    var reseedData = [], strength = 0, i;\n  \n    this._nextReseed = reseedData[0] =\n      (new Date()).valueOf() + this._MILLISECONDS_PER_RESEED;\n    \n    for (i=0; i<16; i++) {\n      /* On some browsers, this is cryptographically random.  So we might\n       * as well toss it in the pot and stir...\n       */\n      reseedData.push(Math.random()*0x100000000|0);\n    }\n    \n    for (i=0; i<this._pools.length; i++) {\n     reseedData = reseedData.concat(this._pools[i].finalize());\n     strength += this._poolEntropy[i];\n     this._poolEntropy[i] = 0;\n   \n     if (!full && (this._reseedCount & (1<<i))) { break; }\n    }\n  \n    /* if we used the last pool, push a new one onto the stack */\n    if (this._reseedCount >= 1 << this._pools.length) {\n     this._pools.push(new sjcl.hash.sha256());\n     this._poolEntropy.push(0);\n    }\n  \n    /* how strong was this reseed? */\n    this._poolStrength -= strength;\n    if (strength > this._strength) {\n      this._strength = strength;\n    }\n  \n    this._reseedCount ++;\n    this._reseed(reseedData);\n  },\n  \n  _mouseCollector: function (ev) {\n    var x = ev.x || ev.clientX || ev.offsetX || 0, y = ev.y || ev.clientY || ev.offsetY || 0;\n    sjcl.random.addEntropy([x,y], 2, \"mouse\");\n  },\n  \n  _loadTimeCollector: function (ev) {\n    sjcl.random.addEntropy((new Date()).valueOf(), 2, \"loadtime\");\n  },\n  \n  _fireEvent: function (name, arg) {\n    var j, cbs=sjcl.random._callbacks[name], cbsTemp=[];\n    /* TODO: there is a race condition between removing collectors and firing them */ \n\n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n  \n    for (j in cbs) {\n     if (cbs.hasOwnProperty(j)) {\n        cbsTemp.push(cbs[j]);\n     }\n    }\n  \n    for (j=0; j<cbsTemp.length; j++) {\n     cbsTemp[j](arg);\n    }\n  }\n};\n\n(function(){\n  try {\n    // get cryptographically strong entropy in Webkit\n    var ab = new Uint32Array(32);\n    crypto.getRandomValues(ab);\n    sjcl.random.addEntropy(ab, 1024, \"crypto.getRandomValues\");\n  } catch (e) {\n    // no getRandomValues :-(\n  }\n})();\n\n/** @fileOverview Convenince functions centered around JSON encapsulation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n \n /** @namespace JSON encapsulation */\n sjcl.json = {\n  /** Default values for encryption */\n  defaults: { v:1, iter:1000, ks:128, ts:64, mode:\"ccm\", adata:\"\", cipher:\"aes\" },\n\n  /** Simple encryption function.\n   * @param {String|bitArray} password The password or key.\n   * @param {String} plaintext The data to encrypt.\n   * @param {Object} [params] The parameters including tag, iv and salt.\n   * @param {Object} [rp] A returned version with filled-in parameters.\n   * @return {String} The ciphertext.\n   * @throws {sjcl.exception.invalid} if a parameter is invalid.\n   */\n  encrypt: function (password, plaintext, params, rp) {\n    params = params || {};\n    rp = rp || {};\n    \n    var j = sjcl.json, p = j._add({ iv: sjcl.random.randomWords(4,0) },\n                                  j.defaults), tmp, prp, adata;\n    j._add(p, params);\n    adata = p.adata;\n    if (typeof p.salt === \"string\") {\n      p.salt = sjcl.codec.base64.toBits(p.salt);\n    }\n    if (typeof p.iv === \"string\") {\n      p.iv = sjcl.codec.base64.toBits(p.iv);\n    }\n    \n    if (!sjcl.mode[p.mode] ||\n        !sjcl.cipher[p.cipher] ||\n        (typeof password === \"string\" && p.iter <= 100) ||\n        (p.ts !== 64 && p.ts !== 96 && p.ts !== 128) ||\n        (p.ks !== 128 && p.ks !== 192 && p.ks !== 256) ||\n        (p.iv.length < 2 || p.iv.length > 4)) {\n      throw new sjcl.exception.invalid(\"json encrypt: invalid parameters\");\n    }\n    \n    if (typeof password === \"string\") {\n      tmp = sjcl.misc.cachedPbkdf2(password, p);\n      password = tmp.key.slice(0,p.ks/32);\n      p.salt = tmp.salt;\n    }\n    if (typeof plaintext === \"string\") {\n      plaintext = sjcl.codec.utf8String.toBits(plaintext);\n    }\n    if (typeof adata === \"string\") {\n      adata = sjcl.codec.utf8String.toBits(adata);\n    }\n    prp = new sjcl.cipher[p.cipher](password);\n    \n    /* return the json data */\n    j._add(rp, p);\n    rp.key = password;\n    \n    /* do the encryption */\n    p.ct = sjcl.mode[p.mode].encrypt(prp, plaintext, p.iv, adata, p.ts);\n    \n    //return j.encode(j._subtract(p, j.defaults));\n    return j.encode(p);\n  },\n  \n  /** Simple decryption function.\n   * @param {String|bitArray} password The password or key.\n   * @param {String} ciphertext The ciphertext to decrypt.\n   * @param {Object} [params] Additional non-default parameters.\n   * @param {Object} [rp] A returned object with filled parameters.\n   * @return {String} The plaintext.\n   * @throws {sjcl.exception.invalid} if a parameter is invalid.\n   * @throws {sjcl.exception.corrupt} if the ciphertext is corrupt.\n   */\n  decrypt: function (password, ciphertext, params, rp) {\n    params = params || {};\n    rp = rp || {};\n    \n    var j = sjcl.json, p = j._add(j._add(j._add({},j.defaults),j.decode(ciphertext)), params, true), ct, tmp, prp, adata=p.adata;\n    if (typeof p.salt === \"string\") {\n      p.salt = sjcl.codec.base64.toBits(p.salt);\n    }\n    if (typeof p.iv === \"string\") {\n      p.iv = sjcl.codec.base64.toBits(p.iv);\n    }\n    \n    if (!sjcl.mode[p.mode] ||\n        !sjcl.cipher[p.cipher] ||\n        (typeof password === \"string\" && p.iter <= 100) ||\n        (p.ts !== 64 && p.ts !== 96 && p.ts !== 128) ||\n        (p.ks !== 128 && p.ks !== 192 && p.ks !== 256) ||\n        (!p.iv) ||\n        (p.iv.length < 2 || p.iv.length > 4)) {\n      throw new sjcl.exception.invalid(\"json decrypt: invalid parameters\");\n    }\n    \n    if (typeof password === \"string\") {\n      tmp = sjcl.misc.cachedPbkdf2(password, p);\n      password = tmp.key.slice(0,p.ks/32);\n      p.salt  = tmp.salt;\n    }\n    if (typeof adata === \"string\") {\n      adata = sjcl.codec.utf8String.toBits(adata);\n    }\n    prp = new sjcl.cipher[p.cipher](password);\n    \n    /* do the decryption */\n    ct = sjcl.mode[p.mode].decrypt(prp, p.ct, p.iv, adata, p.ts);\n    \n    /* return the json data */\n    j._add(rp, p);\n    rp.key = password;\n    \n    return sjcl.codec.utf8String.fromBits(ct);\n  },\n  \n  /** Encode a flat structure into a JSON string.\n   * @param {Object} obj The structure to encode.\n   * @return {String} A JSON string.\n   * @throws {sjcl.exception.invalid} if obj has a non-alphanumeric property.\n   * @throws {sjcl.exception.bug} if a parameter has an unsupported type.\n   */\n  encode: function (obj) {\n    var i, out='{', comma='';\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        if (!i.match(/^[a-z0-9]+$/i)) {\n          throw new sjcl.exception.invalid(\"json encode: invalid property name\");\n        }\n        out += comma + '\"' + i + '\"' + ':';\n        comma = ',';\n        \n        switch (typeof obj[i]) {\n        case 'number':\n        case 'boolean':\n          out += obj[i];\n          break;\n          \n        case 'string':\n          out += '\"' + escape(obj[i]) + '\"';\n          break;\n        \n        case 'object':\n          out += '\"' + sjcl.codec.base64.fromBits(obj[i],0) + '\"';\n          break;\n        \n        default:\n          throw new sjcl.exception.bug(\"json encode: unsupported type\");\n        }\n      }\n    }\n    return out+'}';\n  },\n  \n  /** Decode a simple (flat) JSON string into a structure.  The ciphertext,\n   * adata, salt and iv will be base64-decoded.\n   * @param {String} str The string.\n   * @return {Object} The decoded structure.\n   * @throws {sjcl.exception.invalid} if str isn't (simple) JSON.\n   */\n  decode: function (str) {\n    str = str.replace(/\\s/g,'');\n    if (!str.match(/^\\{.*\\}$/)) { \n      throw new sjcl.exception.invalid(\"json decode: this isn't json!\");\n    }\n    var a = str.replace(/^\\{|\\}$/g, '').split(/,/), out={}, i, m;\n    for (i=0; i<a.length; i++) {\n      if (!(m=a[i].match(/^(?:([\"']?)([a-z][a-z0-9]*)\\1):(?:(\\d+)|\"([a-z0-9+\\/%*_.@=\\-]*)\")$/i))) {\n        throw new sjcl.exception.invalid(\"json decode: this isn't json!\");\n      }\n      if (m[3]) {\n        out[m[2]] = parseInt(m[3],10);\n      } else {\n        out[m[2]] = m[2].match(/^(ct|salt|iv)$/) ? sjcl.codec.base64.toBits(m[4]) : unescape(m[4]);\n      }\n    }\n    return out;\n  },\n  \n  /** Insert all elements of src into target, modifying and returning target.\n   * @param {Object} target The object to be modified.\n   * @param {Object} src The object to pull data from.\n   * @param {boolean} [requireSame=false] If true, throw an exception if any field of target differs from corresponding field of src.\n   * @return {Object} target.\n   * @private\n   */\n  _add: function (target, src, requireSame) {\n    if (target === undefined) { target = {}; }\n    if (src === undefined) { return target; }\n    var i;\n    for (i in src) {\n      if (src.hasOwnProperty(i)) {\n        if (requireSame && target[i] !== undefined && target[i] !== src[i]) {\n          throw new sjcl.exception.invalid(\"required parameter overridden\");\n        }\n        target[i] = src[i];\n      }\n    }\n    return target;\n  },\n  \n  /** Remove all elements of minus from plus.  Does not modify plus.\n   * @private\n   */\n  _subtract: function (plus, minus) {\n    var out = {}, i;\n    \n    for (i in plus) {\n      if (plus.hasOwnProperty(i) && plus[i] !== minus[i]) {\n        out[i] = plus[i];\n      }\n    }\n    \n    return out;\n  },\n  \n  /** Return only the specified elements of src.\n   * @private\n   */\n  _filter: function (src, filter) {\n    var out = {}, i;\n    for (i=0; i<filter.length; i++) {\n      if (src[filter[i]] !== undefined) {\n        out[filter[i]] = src[filter[i]];\n      }\n    }\n    return out;\n  }\n};\n\n/** Simple encryption function; convenient shorthand for sjcl.json.encrypt.\n * @param {String|bitArray} password The password or key.\n * @param {String} plaintext The data to encrypt.\n * @param {Object} [params] The parameters including tag, iv and salt.\n * @param {Object} [rp] A returned version with filled-in parameters.\n * @return {String} The ciphertext.\n */\nsjcl.encrypt = sjcl.json.encrypt;\n\n/** Simple decryption function; convenient shorthand for sjcl.json.decrypt.\n * @param {String|bitArray} password The password or key.\n * @param {String} ciphertext The ciphertext to decrypt.\n * @param {Object} [params] Additional non-default parameters.\n * @param {Object} [rp] A returned object with filled parameters.\n * @return {String} The plaintext.\n */\nsjcl.decrypt = sjcl.json.decrypt;\n\n/** The cache for cachedPbkdf2.\n * @private\n */\nsjcl.misc._pbkdf2Cache = {};\n\n/** Cached PBKDF2 key derivation.\n * @param {String} password The password.\n * @param {Object} [params] The derivation params (iteration count and optional salt).\n * @return {Object} The derived data in key, the salt in salt.\n */\nsjcl.misc.cachedPbkdf2 = function (password, obj) {\n  var cache = sjcl.misc._pbkdf2Cache, c, cp, str, salt, iter;\n  \n  obj = obj || {};\n  iter = obj.iter || 1000;\n  \n  /* open the cache for this password and iteration count */\n  cp = cache[password] = cache[password] || {};\n  c = cp[iter] = cp[iter] || { firstSalt: (obj.salt && obj.salt.length) ?\n                     obj.salt.slice(0) : sjcl.random.randomWords(2,0) };\n          \n  salt = (obj.salt === undefined) ? c.firstSalt : obj.salt;\n  \n  c[salt] = c[salt] || sjcl.misc.pbkdf2(password, salt, obj.iter);\n  return { key: c[salt].slice(0), salt:salt.slice(0) };\n};\n\n\n\n/**\n * Constructs a new bignum from another bignum, a number or a hex string.\n */\nsjcl.bn = function(it) {\n  this.initWith(it);\n};\n\nsjcl.bn.prototype = {\n  radix: 24,\n  maxMul: 8,\n  _class: sjcl.bn,\n  \n  copy: function() {\n    return new this._class(this);\n  },\n\n  /**\n   * Initializes this with it, either as a bn, a number, or a hex string.\n   */\n  initWith: function(it) {\n    var i=0, k, n, l;\n    switch(typeof it) {\n    case \"object\":\n      this.limbs = it.limbs.slice(0);\n      break;\n      \n    case \"number\":\n      this.limbs = [it];\n      this.normalize();\n      break;\n      \n    case \"string\":\n      it = it.replace(/^0x/, '');\n      this.limbs = [];\n      // hack\n      k = this.radix / 4;\n      for (i=0; i < it.length; i+=k) {\n        this.limbs.push(parseInt(it.substring(Math.max(it.length - i - k, 0), it.length - i),16));\n      }\n      break;\n\n    default:\n      this.limbs = [0];\n    }\n    return this;\n  },\n\n  /**\n   * Returns true if \"this\" and \"that\" are equal.  Calls fullReduce().\n   * Equality test is in constant time.\n   */\n  equals: function(that) {\n    if (typeof that === \"number\") { that = new this._class(that); }\n    var difference = 0, i;\n    this.fullReduce();\n    that.fullReduce();\n    for (i = 0; i < this.limbs.length || i < that.limbs.length; i++) {\n      difference |= this.getLimb(i) ^ that.getLimb(i);\n    }\n    return (difference === 0);\n  },\n  \n  /**\n   * Get the i'th limb of this, zero if i is too large.\n   */\n  getLimb: function(i) {\n    return (i >= this.limbs.length) ? 0 : this.limbs[i];\n  },\n  \n  /**\n   * Constant time comparison function.\n   * Returns 1 if this >= that, or zero otherwise.\n   */\n  greaterEquals: function(that) {\n    if (typeof that === \"number\") { that = new this._class(that); }\n    var less = 0, greater = 0, i, a, b;\n    i = Math.max(this.limbs.length, that.limbs.length) - 1;\n    for (; i>= 0; i--) {\n      a = this.getLimb(i);\n      b = that.getLimb(i);\n      greater |= (b - a) & ~less;\n      less |= (a - b) & ~greater;\n    }\n    return (greater | ~less) >>> 31;\n  },\n  \n  /**\n   * Convert to a hex string.\n   */\n  toString: function() {\n    this.fullReduce();\n    var out=\"\", i, s, l = this.limbs;\n    for (i=0; i < this.limbs.length; i++) {\n      s = l[i].toString(16);\n      while (i < this.limbs.length - 1 && s.length < 6) {\n        s = \"0\" + s;\n      }\n      out = s + out;\n    }\n    return \"0x\"+out;\n  },\n  \n  /** this += that.  Does not normalize. */\n  addM: function(that) {\n    if (typeof(that) !== \"object\") { that = new this._class(that); }\n    var i, l=this.limbs, ll=that.limbs;\n    for (i=l.length; i<ll.length; i++) {\n      l[i] = 0;\n    }\n    for (i=0; i<ll.length; i++) {\n      l[i] += ll[i];\n    }\n    return this;\n  },\n  \n  /** this *= 2.  Requires normalized; ends up normalized. */\n  doubleM: function() {\n    var i, carry=0, tmp, r=this.radix, m=this.radixMask, l=this.limbs;\n    for (i=0; i<l.length; i++) {\n      tmp = l[i];\n      tmp = tmp+tmp+carry;\n      l[i] = tmp & m;\n      carry = tmp >> r;\n    }\n    if (carry) {\n      l.push(carry);\n    }\n    return this;\n  },\n  \n  /** this /= 2, rounded down.  Requires normalized; ends up normalized. */\n  halveM: function() {\n    var i, carry=0, tmp, r=this.radix, l=this.limbs;\n    for (i=l.length-1; i>=0; i--) {\n      tmp = l[i];\n      l[i] = (tmp+carry)>>1;\n      carry = (tmp&1) << r;\n    }\n    if (!l[l.length-1]) {\n      l.pop();\n    }\n    return this;\n  },\n\n  /** this -= that.  Does not normalize. */\n  subM: function(that) {\n    if (typeof(that) !== \"object\") { that = new this._class(that); }\n    var i, l=this.limbs, ll=that.limbs;\n    for (i=l.length; i<ll.length; i++) {\n      l[i] = 0;\n    }\n    for (i=0; i<ll.length; i++) {\n      l[i] -= ll[i];\n    }\n    return this;\n  },\n  \n  mod: function(that) {\n    that = new sjcl.bn(that).normalize(); // copy before we begin\n    var out = new sjcl.bn(this).normalize(), ci=0;\n    \n    for (; out.greaterEquals(that); ci++) {\n      that.doubleM();\n    }\n    for (; ci > 0; ci--) {\n      that.halveM();\n      if (out.greaterEquals(that)) {\n        out.subM(that).normalize();\n      }\n    }\n    return out.trim();\n  },\n  \n  /** return inverse mod prime p.  p must be odd. Binary extended Euclidean algorithm mod p. */\n  inverseMod: function(p) {\n    var a = new sjcl.bn(1), b = new sjcl.bn(0), x = new sjcl.bn(this), y = new sjcl.bn(p), tmp, i, nz=1;\n    \n    if (!(p.limbs[0] & 1)) {\n      throw (new sjcl.exception.invalid(\"inverseMod: p must be odd\"));\n    }\n    \n    // invariant: y is odd\n    do {\n      if (x.limbs[0] & 1) {\n        if (!x.greaterEquals(y)) {\n          // x < y; swap everything\n          tmp = x; x = y; y = tmp;\n          tmp = a; a = b; b = tmp;\n        }\n        x.subM(y);\n        x.normalize();\n        \n        if (!a.greaterEquals(b)) {\n          a.addM(p);\n        }\n        a.subM(b);\n      }\n      \n      // cut everything in half\n      x.halveM();\n      if (a.limbs[0] & 1) {\n        a.addM(p);\n      }\n      a.normalize();\n      a.halveM();\n      \n      // check for termination: x ?= 0\n      for (i=nz=0; i<x.limbs.length; i++) {\n        nz |= x.limbs[i];\n      }\n    } while(nz);\n    \n    if (!y.equals(1)) {\n      throw (new sjcl.exception.invalid(\"inverseMod: p and x must be relatively prime\"));\n    }\n    \n    return b;\n  },\n  \n  /** this + that.  Does not normalize. */\n  add: function(that) {\n    return this.copy().addM(that);\n  },\n\n  /** this - that.  Does not normalize. */\n  sub: function(that) {\n    return this.copy().subM(that);\n  },\n  \n  /** this * that.  Normalizes and reduces. */\n  mul: function(that) {\n    if (typeof(that) === \"number\") { that = new this._class(that); }\n    var i, j, a = this.limbs, b = that.limbs, al = a.length, bl = b.length, out = new this._class(), c = out.limbs, ai, ii=this.maxMul;\n\n    for (i=0; i < this.limbs.length + that.limbs.length + 1; i++) {\n      c[i] = 0;\n    }\n    for (i=0; i<al; i++) {\n      ai = a[i];\n      for (j=0; j<bl; j++) {\n        c[i+j] += ai * b[j];\n      }\n     \n      if (!--ii) {\n        ii = this.maxMul;\n        out.cnormalize();\n      }\n    }\n    return out.cnormalize().reduce();\n  },\n\n  /** this ^ 2.  Normalizes and reduces. */\n  square: function() {\n    return this.mul(this);\n  },\n\n  /** this ^ n.  Uses square-and-multiply.  Normalizes and reduces. */\n  power: function(l) {\n    if (typeof(l) === \"number\") {\n      l = [l];\n    } else if (l.limbs !== undefined) {\n      l = l.normalize().limbs;\n    }\n    var i, j, out = new this._class(1), pow = this;\n\n    for (i=0; i<l.length; i++) {\n      for (j=0; j<this.radix; j++) {\n        if (l[i] & (1<<j)) {\n          out = out.mul(pow);\n        }\n        pow = pow.square();\n      }\n    }\n    \n    return out;\n  },\n\n  /** this * that mod N */\n  mulmod: function(that, N) {\n    return this.mod(N).mul(that.mod(N)).mod(N);\n  },\n\n  /** this ^ x mod N */\n  powermod: function(x, N) {\n    var result = new sjcl.bn(1), a = new sjcl.bn(this), k = new sjcl.bn(x);\n    while (true) {\n      if (k.limbs[0] & 1) { result = result.mulmod(a, N); }\n      k.halveM();\n      if (k.equals(0)) { break; }\n      a = a.mulmod(a, N);\n    }\n    return result.normalize().reduce();\n  },\n\n  trim: function() {\n    var l = this.limbs, p;\n    do {\n      p = l.pop();\n    } while (l.length && p === 0);\n    l.push(p);\n    return this;\n  },\n  \n  /** Reduce mod a modulus.  Stubbed for subclassing. */\n  reduce: function() {\n    return this;\n  },\n\n  /** Reduce and normalize. */\n  fullReduce: function() {\n    return this.normalize();\n  },\n  \n  /** Propagate carries. */\n  normalize: function() {\n    var carry=0, i, pv = this.placeVal, ipv = this.ipv, l, m, limbs = this.limbs, ll = limbs.length, mask = this.radixMask;\n    for (i=0; i < ll || (carry !== 0 && carry !== -1); i++) {\n      l = (limbs[i]||0) + carry;\n      m = limbs[i] = l & mask;\n      carry = (l-m)*ipv;\n    }\n    if (carry === -1) {\n      limbs[i-1] -= this.placeVal;\n    }\n    return this;\n  },\n\n  /** Constant-time normalize. Does not allocate additional space. */\n  cnormalize: function() {\n    var carry=0, i, ipv = this.ipv, l, m, limbs = this.limbs, ll = limbs.length, mask = this.radixMask;\n    for (i=0; i < ll-1; i++) {\n      l = limbs[i] + carry;\n      m = limbs[i] = l & mask;\n      carry = (l-m)*ipv;\n    }\n    limbs[i] += carry;\n    return this;\n  },\n  \n  /** Serialize to a bit array */\n  toBits: function(len) {\n    this.fullReduce();\n    len = len || this.exponent || this.limbs.length * this.radix;\n    var i = Math.floor((len-1)/24), w=sjcl.bitArray, e = (len + 7 & -8) % this.radix || this.radix,\n        out = [w.partial(e, this.getLimb(i))];\n    for (i--; i >= 0; i--) {\n      out = w.concat(out, [w.partial(this.radix, this.getLimb(i))]);\n    }\n    return out;\n  },\n  \n  /** Return the length in bits, rounded up to the nearest byte. */\n  bitLength: function() {\n    this.fullReduce();\n    var out = this.radix * (this.limbs.length - 1),\n        b = this.limbs[this.limbs.length - 1];\n    for (; b; b >>= 1) {\n      out ++;\n    }\n    return out+7 & -8;\n  }\n};\n\nsjcl.bn.fromBits = function(bits) {\n  var Class = this, out = new Class(), words=[], w=sjcl.bitArray, t = this.prototype,\n      l = Math.min(this.bitLength || 0x100000000, w.bitLength(bits)), e = l % t.radix || t.radix;\n  \n  words[0] = w.extract(bits, 0, e);\n  for (; e < l; e += t.radix) {\n    words.unshift(w.extract(bits, e, t.radix));\n  }\n\n  out.limbs = words;\n  return out;\n};\n\n\n\nsjcl.bn.prototype.ipv = 1 / (sjcl.bn.prototype.placeVal = Math.pow(2,sjcl.bn.prototype.radix));\nsjcl.bn.prototype.radixMask = (1 << sjcl.bn.prototype.radix) - 1;\n\n/**\n * Creates a new subclass of bn, based on reduction modulo a pseudo-Mersenne prime,\n * i.e. a prime of the form 2^e + sum(a * 2^b),where the sum is negative and sparse.\n */\nsjcl.bn.pseudoMersennePrime = function(exponent, coeff) {\n  function p(it) {\n    this.initWith(it);\n    /*if (this.limbs[this.modOffset]) {\n      this.reduce();\n    }*/\n  }\n\n  var ppr = p.prototype = new sjcl.bn(), i, tmp, mo;\n  mo = ppr.modOffset = Math.ceil(tmp = exponent / ppr.radix);\n  ppr.exponent = exponent;\n  ppr.offset = [];\n  ppr.factor = [];\n  ppr.minOffset = mo;\n  ppr.fullMask = 0;\n  ppr.fullOffset = [];\n  ppr.fullFactor = [];\n  ppr.modulus = p.modulus = new sjcl.bn(Math.pow(2,exponent));\n  \n  ppr.fullMask = 0|-Math.pow(2, exponent % ppr.radix);\n\n  for (i=0; i<coeff.length; i++) {\n    ppr.offset[i] = Math.floor(coeff[i][0] / ppr.radix - tmp);\n    ppr.fullOffset[i] = Math.ceil(coeff[i][0] / ppr.radix - tmp);\n    ppr.factor[i] = coeff[i][1] * Math.pow(1/2, exponent - coeff[i][0] + ppr.offset[i] * ppr.radix);\n    ppr.fullFactor[i] = coeff[i][1] * Math.pow(1/2, exponent - coeff[i][0] + ppr.fullOffset[i] * ppr.radix);\n    ppr.modulus.addM(new sjcl.bn(Math.pow(2,coeff[i][0])*coeff[i][1]));\n    ppr.minOffset = Math.min(ppr.minOffset, -ppr.offset[i]); // conservative\n  }\n  ppr._class = p;\n  ppr.modulus.cnormalize();\n\n  /** Approximate reduction mod p.  May leave a number which is negative or slightly larger than p. */\n  ppr.reduce = function() {\n    var i, k, l, mo = this.modOffset, limbs = this.limbs, aff, off = this.offset, ol = this.offset.length, fac = this.factor, ll;\n\n    i = this.minOffset;\n    while (limbs.length > mo) {\n      l = limbs.pop();\n      ll = limbs.length;\n      for (k=0; k<ol; k++) {\n        limbs[ll+off[k]] -= fac[k] * l;\n      }\n      \n      i--;\n      if (!i) {\n        limbs.push(0);\n        this.cnormalize();\n        i = this.minOffset;\n      }\n    }\n    this.cnormalize();\n\n    return this;\n  };\n  \n  ppr._strongReduce = (ppr.fullMask === -1) ? ppr.reduce : function() {\n    var limbs = this.limbs, i = limbs.length - 1, k, l;\n    this.reduce();\n    if (i === this.modOffset - 1) {\n      l = limbs[i] & this.fullMask;\n      limbs[i] -= l;\n      for (k=0; k<this.fullOffset.length; k++) {\n        limbs[i+this.fullOffset[k]] -= this.fullFactor[k] * l;\n      }\n      this.normalize();\n    }\n  };\n\n  /** mostly constant-time, very expensive full reduction. */\n  ppr.fullReduce = function() {\n    var greater, i;\n    // massively above the modulus, may be negative\n    \n    this._strongReduce();\n    // less than twice the modulus, may be negative\n\n    this.addM(this.modulus);\n    this.addM(this.modulus);\n    this.normalize();\n    // probably 2-3x the modulus\n    \n    this._strongReduce();\n    // less than the power of 2.  still may be more than\n    // the modulus\n\n    // HACK: pad out to this length\n    for (i=this.limbs.length; i<this.modOffset; i++) {\n      this.limbs[i] = 0;\n    }\n    \n    // constant-time subtract modulus\n    greater = this.greaterEquals(this.modulus);\n    for (i=0; i<this.limbs.length; i++) {\n      this.limbs[i] -= this.modulus.limbs[i] * greater;\n    }\n    this.cnormalize();\n\n    return this;\n  };\n\n  ppr.inverse = function() {\n    return (this.power(this.modulus.sub(2)));\n  };\n\n  p.fromBits = sjcl.bn.fromBits;\n\n  return p;\n};\n\n// a small Mersenne prime\nsjcl.bn.prime = {\n  p127: sjcl.bn.pseudoMersennePrime(127, [[0,-1]]),\n\n  // Bernstein's prime for Curve25519\n  p25519: sjcl.bn.pseudoMersennePrime(255, [[0,-19]]),\n\n  // NIST primes\n  p192: sjcl.bn.pseudoMersennePrime(192, [[0,-1],[64,-1]]),\n  p224: sjcl.bn.pseudoMersennePrime(224, [[0,1],[96,-1]]),\n  p256: sjcl.bn.pseudoMersennePrime(256, [[0,-1],[96,1],[192,1],[224,-1]]),\n  p384: sjcl.bn.pseudoMersennePrime(384, [[0,-1],[32,1],[96,-1],[128,-1]]),\n  p521: sjcl.bn.pseudoMersennePrime(521, [[0,-1]])\n};\n\nsjcl.bn.random = function(modulus, paranoia) {\n  if (typeof modulus !== \"object\") { modulus = new sjcl.bn(modulus); }\n  var words, i, l = modulus.limbs.length, m = modulus.limbs[l-1]+1, out = new sjcl.bn();\n  while (true) {\n    // get a sequence whose first digits make sense\n    do {\n      words = sjcl.random.randomWords(l, paranoia);\n      if (words[l-1] < 0) { words[l-1] += 0x100000000; }\n    } while (Math.floor(words[l-1] / m) === Math.floor(0x100000000 / m));\n    words[l-1] %= m;\n\n    // mask off all the limbs\n    for (i=0; i<l-1; i++) {\n      words[i] &= modulus.radixMask;\n    }\n\n    // check the rest of the digitssj\n    out.limbs = words;\n    if (!out.greaterEquals(modulus)) {\n      return out;\n    }\n  }\n};\n\n\nsjcl.ecc = {};\n\n/**\n * Represents a point on a curve in affine coordinates.\n * @constructor\n * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n * @param {bigInt} x The x coordinate.\n * @param {bigInt} y The y coordinate.\n */\nsjcl.ecc.point = function(curve,x,y) {\n  if (x === undefined) {\n    this.isIdentity = true;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.isIdentity = false;\n  }\n  this.curve = curve;\n};\n\n\n\nsjcl.ecc.point.prototype = {\n  toJac: function() {\n    return new sjcl.ecc.pointJac(this.curve, this.x, this.y, new this.curve.field(1));\n  },\n\n  mult: function(k) {\n    return this.toJac().mult(k, this).toAffine();\n  },\n  \n  /**\n   * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply this by.\n   * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n   * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n   */\n  mult2: function(k, k2, affine2) {\n    return this.toJac().mult2(k, this, k2, affine2).toAffine();\n  },\n  \n  multiples: function() {\n    var m, i, j;\n    if (this._multiples === undefined) {\n      j = this.toJac().doubl();\n      m = this._multiples = [new sjcl.ecc.point(this.curve), this, j.toAffine()];\n      for (i=3; i<16; i++) {\n        j = j.add(this);\n        m.push(j.toAffine());\n      }\n    }\n    return this._multiples;\n  },\n\n  isValid: function() {\n    return this.y.square().equals(this.curve.b.add(this.x.mul(this.curve.a.add(this.x.square()))));\n  },\n\n  toBits: function() {\n    return sjcl.bitArray.concat(this.x.toBits(), this.y.toBits());\n  }\n};\n\n/**\n * Represents a point on a curve in Jacobian coordinates. Coordinates can be specified as bigInts or strings (which\n * will be converted to bigInts).\n *\n * @constructor\n * @param {bigInt/string} x The x coordinate.\n * @param {bigInt/string} y The y coordinate.\n * @param {bigInt/string} z The z coordinate.\n * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n */\nsjcl.ecc.pointJac = function(curve, x, y, z) {\n  if (x === undefined) {\n    this.isIdentity = true;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isIdentity = false;\n  }\n  this.curve = curve;\n};\n\nsjcl.ecc.pointJac.prototype = {\n  /**\n   * Adds S and T and returns the result in Jacobian coordinates. Note that S must be in Jacobian coordinates and T must be in affine coordinates.\n   * @param {sjcl.ecc.pointJac} S One of the points to add, in Jacobian coordinates.\n   * @param {sjcl.ecc.point} T The other point to add, in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The sum of the two points, in Jacobian coordinates. \n   */\n  add: function(T) {\n    var S = this, sz2, c, d, c2, x1, x2, x, y1, y2, y, z;\n    if (S.curve !== T.curve) {\n      throw(\"sjcl.ecc.add(): Points must be on the same curve to add them!\");\n    }\n\n    if (S.isIdentity) {\n      return T.toJac();\n    } else if (T.isIdentity) {\n      return S;\n    }\n\n    sz2 = S.z.square();\n    c = T.x.mul(sz2).subM(S.x);\n\n    if (c.equals(0)) {\n      if (S.y.equals(T.y.mul(sz2.mul(S.z)))) {\n        // same point\n        return S.doubl();\n      } else {\n        // inverses\n        return new sjcl.ecc.pointJac(S.curve);\n      }\n    }\n    \n    d = T.y.mul(sz2.mul(S.z)).subM(S.y);\n    c2 = c.square();\n\n    x1 = d.square();\n    x2 = c.square().mul(c).addM( S.x.add(S.x).mul(c2) );\n    x  = x1.subM(x2);\n\n    y1 = S.x.mul(c2).subM(x).mul(d);\n    y2 = S.y.mul(c.square().mul(c));\n    y  = y1.subM(y2);\n\n    z  = S.z.mul(c);\n\n    return new sjcl.ecc.pointJac(this.curve,x,y,z);\n  },\n  \n  /**\n   * doubles this point.\n   * @return {sjcl.ecc.pointJac} The doubled point.\n   */\n  doubl: function() {\n    if (this.isIdentity) { return this; }\n\n    var\n      y2 = this.y.square(),\n      a  = y2.mul(this.x.mul(4)),\n      b  = y2.square().mul(8),\n      z2 = this.z.square(),\n      c  = this.x.sub(z2).mul(3).mul(this.x.add(z2)),\n      x  = c.square().subM(a).subM(a),\n      y  = a.sub(x).mul(c).subM(b),\n      z  = this.y.add(this.y).mul(this.z);\n    return new sjcl.ecc.pointJac(this.curve, x, y, z);\n  },\n\n  /**\n   * Returns a copy of this point converted to affine coordinates.\n   * @return {sjcl.ecc.point} The converted point.\n   */  \n  toAffine: function() {\n    if (this.isIdentity || this.z.equals(0)) {\n      return new sjcl.ecc.point(this.curve);\n    }\n    var zi = this.z.inverse(), zi2 = zi.square();\n    return new sjcl.ecc.point(this.curve, this.x.mul(zi2).fullReduce(), this.y.mul(zi2.mul(zi)).fullReduce());\n  },\n  \n  /**\n   * Multiply this point by k and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply by.\n   * @param {sjcl.ecc.point} affine This point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication, in Jacobian coordinates.\n   */\n  mult: function(k, affine) {\n    if (typeof(k) === \"number\") {\n      k = [k];\n    } else if (k.limbs !== undefined) {\n      k = k.normalize().limbs;\n    }\n    \n    var i, j, out = new sjcl.ecc.point(this.curve).toJac(), multiples = affine.multiples();\n\n    for (i=k.length-1; i>=0; i--) {\n      for (j=sjcl.bn.prototype.radix-4; j>=0; j-=4) {\n        out = out.doubl().doubl().doubl().doubl().add(multiples[k[i]>>j & 0xF]);\n      }\n    }\n    \n    return out;\n  },\n  \n  /**\n   * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply this by.\n   * @param {sjcl.ecc.point} affine This point in affine coordinates.\n   * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n   * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n   */\n  mult2: function(k1, affine, k2, affine2) {\n    if (typeof(k1) === \"number\") {\n      k1 = [k1];\n    } else if (k1.limbs !== undefined) {\n      k1 = k1.normalize().limbs;\n    }\n    \n    if (typeof(k2) === \"number\") {\n      k2 = [k2];\n    } else if (k2.limbs !== undefined) {\n      k2 = k2.normalize().limbs;\n    }\n    \n    var i, j, out = new sjcl.ecc.point(this.curve).toJac(), m1 = affine.multiples(),\n        m2 = affine2.multiples(), l1, l2;\n\n    for (i=Math.max(k1.length,k2.length)-1; i>=0; i--) {\n      l1 = k1[i] | 0;\n      l2 = k2[i] | 0;\n      for (j=sjcl.bn.prototype.radix-4; j>=0; j-=4) {\n        out = out.doubl().doubl().doubl().doubl().add(m1[l1>>j & 0xF]).add(m2[l2>>j & 0xF]);\n      }\n    }\n    \n    return out;\n  },\n\n  isValid: function() {\n    var z2 = this.z.square(), z4 = z2.square(), z6 = z4.mul(z2);\n    return this.y.square().equals(\n             this.curve.b.mul(z6).add(this.x.mul(\n               this.curve.a.mul(z4).add(this.x.square()))));\n  }\n};\n\n/**\n * Construct an elliptic curve. Most users will not use this and instead start with one of the NIST curves defined below.\n *\n * @constructor\n * @param {bigInt} p The prime modulus.\n * @param {bigInt} r The prime order of the curve.\n * @param {bigInt} a The constant a in the equation of the curve y^2 = x^3 + ax + b (for NIST curves, a is always -3).\n * @param {bigInt} x The x coordinate of a base point of the curve.\n * @param {bigInt} y The y coordinate of a base point of the curve.\n */\nsjcl.ecc.curve = function(Field, r, a, b, x, y) {\n  this.field = Field;\n  this.r = Field.prototype.modulus.sub(r);\n  this.a = new Field(a);\n  this.b = new Field(b);\n  this.G = new sjcl.ecc.point(this, new Field(x), new Field(y));\n};\n\nsjcl.ecc.curve.prototype.fromBits = function (bits) {\n  var w = sjcl.bitArray, l = this.field.prototype.exponent + 7 & -8,\n      p = new sjcl.ecc.point(this, this.field.fromBits(w.bitSlice(bits, 0, l)),\n                             this.field.fromBits(w.bitSlice(bits, l, 2*l)));\n  if (!p.isValid()) {\n    throw new sjcl.exception.corrupt(\"not on the curve!\");\n  }\n  return p;\n};\n\nsjcl.ecc.curves = {\n  c192: new sjcl.ecc.curve(\n    sjcl.bn.prime.p192,\n    \"0x662107c8eb94364e4b2dd7ce\",\n    -3,\n    \"0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1\",\n    \"0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012\",\n    \"0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811\"),\n\n  c224: new sjcl.ecc.curve(\n    sjcl.bn.prime.p224,\n    \"0xe95c1f470fc1ec22d6baa3a3d5c4\",\n    -3,\n    \"0xb4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4\",\n    \"0xb70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n    \"0xbd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34\"),\n\n  c256: new sjcl.ecc.curve(\n    sjcl.bn.prime.p256,\n    \"0x4319055358e8617b0c46353d039cdaae\",\n    -3,\n    \"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\",\n    \"0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\",\n    \"0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\"),\n\n  c384: new sjcl.ecc.curve(\n    sjcl.bn.prime.p384,\n    \"0x389cb27e0bc8d21fa7e5f24cb74f58851313e696333ad68c\",\n    -3,\n    \"0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\",\n    \"0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\",\n    \"0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\")\n};\n\n\n/* Diffie-Hellman-like public-key system */\nsjcl.ecc._dh = function(cn) {\n  sjcl.ecc[cn] = {\n    publicKey: function(curve, point) {\n      this._curve = curve;\n      if (point instanceof Array) {\n        this._point = curve.fromBits(point);\n      } else {\n        this._point = point;\n      }\n    },\n\n    secretKey: function(curve, exponent) {\n      this._curve = curve;\n      this._exponent = exponent;\n    },\n\n    generateKeys: function(curve, paranoia) {\n      if (curve === undefined) {\n        curve = 256;\n      }\n      if (typeof curve === \"number\") {\n        curve = sjcl.ecc.curves['c'+curve];\n        if (curve === undefined) {\n          throw new sjcl.exception.invalid(\"no such curve\");\n        }\n      }\n      var sec = sjcl.bn.random(curve.r, paranoia), pub = curve.G.mult(sec);\n      return { pub: new sjcl.ecc[cn].publicKey(curve, pub),\n               sec: new sjcl.ecc[cn].secretKey(curve, sec) };\n    }\n  }; \n};\n\nsjcl.ecc._dh(\"elGamal\");\n\nsjcl.ecc.elGamal.publicKey.prototype = {\n  kem: function(paranoia) {\n    var sec = sjcl.bn.random(this._curve.r, paranoia),\n        tag = this._curve.G.mult(sec).toBits(),\n        key = sjcl.hash.sha256.hash(this._point.mult(sec).toBits());\n    return { key: key, tag: tag };\n  }\n};\n\nsjcl.ecc.elGamal.secretKey.prototype = {\n  unkem: function(tag) {\n    return sjcl.hash.sha256.hash(this._curve.fromBits(tag).mult(this._exponent).toBits());\n  },\n\n  dh: function(pk) {\n    return sjcl.hash.sha256.hash(pk._point.mult(this._exponent).toBits());\n  }\n};\n\nsjcl.ecc._dh(\"ecdsa\");\n\nsjcl.ecc.ecdsa.secretKey.prototype = {\n  sign: function(hash, paranoia) {\n    var R = this._curve.r,\n        l = R.bitLength(),\n        k = sjcl.bn.random(R.sub(1), paranoia).add(1),\n        r = this._curve.G.mult(k).x.mod(R),\n        s = sjcl.bn.fromBits(hash).add(r.mul(this._exponent)).inverseMod(R).mul(k).mod(R);\n    return sjcl.bitArray.concat(r.toBits(l), s.toBits(l));\n  }\n};\n\nsjcl.ecc.ecdsa.publicKey.prototype = {\n  verify: function(hash, rs) {\n    var w = sjcl.bitArray,\n        R = this._curve.r,\n        l = R.bitLength(),\n        r = sjcl.bn.fromBits(w.bitSlice(rs,0,l)),\n        s = sjcl.bn.fromBits(w.bitSlice(rs,l,2*l)),\n        hG = sjcl.bn.fromBits(hash).mul(s).mod(R),\n        hA = r.mul(s).mod(R),\n        r2 = this._curve.G.mult2(hG, hA, this._point).x;\n        \n    if (r.equals(0) || s.equals(0) || r.greaterEquals(R) || s.greaterEquals(R) || !r2.equals(r)) {\n      throw (new sjcl.exception.corrupt(\"signature didn't check out\"));\n    }\n    return true;\n  }\n};\n\n/** @fileOverview Javascript SRP implementation.\n *\n * This file contains a partial implementation of the SRP (Secure Remote\n * Password) password-authenticated key exchange protocol. Given a user\n * identity, salt, and SRP group, it generates the SRP verifier that may\n * be sent to a remote server to establish and SRP account.\n *\n * For more information, see http://srp.stanford.edu/.\n *\n * @author Quinn Slack\n */\n\n/**\n * Compute the SRP verifier from the username, password, salt, and group.\n * @class SRP\n */\nsjcl.keyexchange.srp = {\n  /**\n   * Calculates SRP v, the verifier. \n   *   v = g^x mod N [RFC 5054]\n   * @param {String} I The username.\n   * @param {String} P The password.\n   * @param {Object} s A bitArray of the salt.\n   * @param {Object} group The SRP group. Use sjcl.keyexchange.srp.knownGroup\n                           to obtain this object.\n   * @return {Object} A bitArray of SRP v.\n   */\n  makeVerifier: function(I, P, s, group) {\n    var x;\n    x = this.makeX(I, P, s);\n    x = sjcl.bn.fromBits(x);\n    return group.g.powermod(x, group.N);\n  },\n\n  /**\n   * Calculates SRP x.\n   *   x = SHA1(<salt> | SHA(<username> | \":\" | <raw password>)) [RFC 2945]\n   * @param {String} I The username.\n   * @param {String} P The password.\n   * @param {Object} s A bitArray of the salt.\n   * @return {Object} A bitArray of SRP x.\n   */\n  makeX: function(I, P, s) {\n    var inner = sjcl.hash.sha1.hash(I + ':' + P);\n    return sjcl.hash.sha1.hash(sjcl.bitArray.concat(s, inner));\n  },\n\n  /**\n   * Returns the known SRP group with the given size (in bits).\n   * @param {String} i The size of the known SRP group.\n   * @return {Object} An object with \"N\" and \"g\" properties.\n   */\n  knownGroup:function(i) {\n    if (typeof i !== \"string\") { i = i.toString(); }\n    if (!this._didInitKnownGroups) { this._initKnownGroups(); }\n    return this._knownGroups[i];\n  },\n\n  /**\n   * Initializes bignum objects for known group parameters.\n   * @private\n   */\n  _didInitKnownGroups: false,\n  _initKnownGroups:function() {\n    var i, size, group;\n    for (i=0; i < this._knownGroupSizes.length; i++) {\n      size = this._knownGroupSizes[i].toString();\n      group = this._knownGroups[size];\n      group.N = new sjcl.bn(group.N);\n      group.g = new sjcl.bn(group.g);\n    }\n    this._didInitKnownGroups = true;\n  },\n\n  _knownGroupSizes: [1024, 1536, 2048],\n  _knownGroups: {\n    1024: {\n      N: \"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C\" +\n         \"9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE4\" +\n         \"8E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B29\" +\n         \"7BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9A\" +\n         \"FD5138FE8376435B9FC61D2FC0EB06E3\",\n      g:2\n    },\n\n    1536: {\n      N: \"9DEF3CAFB939277AB1F12A8617A47BBBDBA51DF499AC4C80BEEEA961\" +\n         \"4B19CC4D5F4F5F556E27CBDE51C6A94BE4607A291558903BA0D0F843\" +\n         \"80B655BB9A22E8DCDF028A7CEC67F0D08134B1C8B97989149B609E0B\" +\n         \"E3BAB63D47548381DBC5B1FC764E3F4B53DD9DA1158BFD3E2B9C8CF5\" +\n         \"6EDF019539349627DB2FD53D24B7C48665772E437D6C7F8CE442734A\" +\n         \"F7CCB7AE837C264AE3A9BEB87F8A2FE9B8B5292E5A021FFF5E91479E\" +\n         \"8CE7A28C2442C6F315180F93499A234DCF76E3FED135F9BB\",\n      g: 2\n    },\n\n    2048: {\n      N: \"AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC319294\" +\n         \"3DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310D\" +\n         \"CD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FB\" +\n         \"D5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF74\" +\n         \"7359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A\" +\n         \"436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D\" +\n         \"5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E73\" +\n         \"03CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB6\" +\n         \"94B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F\" +\n         \"9E4AFF73\",\n      g: 2\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// module.id = 7\n// module.realId = 4\n// module.chunks = main\n//@ sourceURL=webpack-module:///atlas/www/ripple/build/sjcl.js");

/******/},
/******/
/******/5: function(module, exports, require) {

/******/ /* WEBPACK FREE VAR INJECTION */ (function(console) {
eval("// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nvar isArray = Array.isArray;\r\n\r\nfunction EventEmitter() { }\r\nexports.EventEmitter = EventEmitter;\r\n\r\n// By default EventEmitters will print a warning if more than\r\n// 10 listeners are added to it. This is a useful default which\r\n// helps finding memory leaks.\r\n//\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nvar defaultMaxListeners = 10;\r\nEventEmitter.prototype.setMaxListeners = function(n) {\r\n  if (!this._events) this._events = {};\r\n  this._maxListeners = n;\r\n};\r\n\r\n\r\nEventEmitter.prototype.emit = function() {\r\n  var type = arguments[0];\r\n  // If there is no 'error' event listener then throw.\r\n  if (type === 'error') {\r\n    if (!this._events || !this._events.error ||\r\n        (isArray(this._events.error) && !this._events.error.length))\r\n    {\r\n      if (arguments[1] instanceof Error) {\r\n        throw arguments[1]; // Unhandled 'error' event\r\n      } else {\r\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (!this._events) return false;\r\n  var handler = this._events[type];\r\n  if (!handler) return false;\r\n\r\n  if (typeof handler == 'function') {\r\n    switch (arguments.length) {\r\n      // fast cases\r\n      case 1:\r\n        handler.call(this);\r\n        break;\r\n      case 2:\r\n        handler.call(this, arguments[1]);\r\n        break;\r\n      case 3:\r\n        handler.call(this, arguments[1], arguments[2]);\r\n        break;\r\n      // slower\r\n      default:\r\n        var l = arguments.length;\r\n        var args = new Array(l - 1);\r\n        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\r\n        handler.apply(this, args);\r\n    }\r\n    return true;\r\n\r\n  } else if (isArray(handler)) {\r\n    var l = arguments.length;\r\n    var args = new Array(l - 1);\r\n    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\r\n\r\n    var listeners = handler.slice();\r\n    for (var i = 0, l = listeners.length; i < l; i++) {\r\n      listeners[i].apply(this, args);\r\n    }\r\n    return true;\r\n\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.addListener = function(type, listener) {\r\n  if ('function' !== typeof listener) {\r\n    throw new Error('addListener only takes instances of Function');\r\n  }\r\n\r\n  if (!this._events) this._events = {};\r\n\r\n  // To avoid recursion in the case that type == \"newListeners\"! Before\r\n  // adding it to the listeners, first emit \"newListeners\".\r\n  this.emit('newListener', type, typeof listener.listener === 'function' ?\r\n            listener.listener : listener);\r\n\r\n  if (!this._events[type]) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    this._events[type] = listener;\r\n  } else if (isArray(this._events[type])) {\r\n\r\n    // If we've already got an array, just append.\r\n    this._events[type].push(listener);\r\n\r\n  } else {\r\n    // Adding the second element, need to change to array.\r\n    this._events[type] = [this._events[type], listener];\r\n\r\n  }\r\n\r\n  // Check for listener leak\r\n  if (isArray(this._events[type]) && !this._events[type].warned) {\r\n    var m;\r\n    if (this._maxListeners !== undefined) {\r\n      m = this._maxListeners;\r\n    } else {\r\n      m = defaultMaxListeners;\r\n    }\r\n\r\n    if (m && m > 0 && this._events[type].length > m) {\r\n      this._events[type].warned = true;\r\n      console.error('(node) warning: possible EventEmitter memory ' +\r\n                    'leak detected. %d listeners added. ' +\r\n                    'Use emitter.setMaxListeners() to increase limit.',\r\n                    this._events[type].length);\r\n      console.trace();\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.once = function(type, listener) {\r\n  if ('function' !== typeof listener) {\r\n    throw new Error('.once only takes instances of Function');\r\n  }\r\n\r\n  var self = this;\r\n  function g() {\r\n    self.removeListener(type, g);\r\n    listener.apply(this, arguments);\r\n  };\r\n\r\n  g.listener = listener;\r\n  self.on(type, g);\r\n\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.removeListener = function(type, listener) {\r\n  if ('function' !== typeof listener) {\r\n    throw new Error('removeListener only takes instances of Function');\r\n  }\r\n\r\n  // does not use listeners(), so no side effect of creating _events[type]\r\n  if (!this._events || !this._events[type]) return this;\r\n\r\n  var list = this._events[type];\r\n\r\n  if (isArray(list)) {\r\n    var position = -1;\r\n    for (var i = 0, length = list.length; i < length; i++) {\r\n      if (list[i] === listener ||\r\n          (list[i].listener && list[i].listener === listener))\r\n      {\r\n        position = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (position < 0) return this;\r\n    list.splice(position, 1);\r\n    if (list.length == 0)\r\n      delete this._events[type];\r\n  } else if (list === listener ||\r\n             (list.listener && list.listener === listener))\r\n  {\r\n    delete this._events[type];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.removeAllListeners = function(type) {\r\n  if (arguments.length === 0) {\r\n    this._events = {};\r\n    return this;\r\n  }\r\n\r\n  // does not use listeners(), so no side effect of creating _events[type]\r\n  if (type && this._events && this._events[type]) this._events[type] = null;\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.listeners = function(type) {\r\n  if (!this._events) this._events = {};\r\n  if (!this._events[type]) this._events[type] = [];\r\n  if (!isArray(this._events[type])) {\r\n    this._events[type] = [this._events[type]];\r\n  }\r\n  return this._events[type];\r\n};\r\n\n\n// WEBPACK FOOTER //\n// module.id = 4\n// module.realId = 5\n// module.chunks = main\n//@ sourceURL=webpack-module:///(webpack)/buildin/web_modules/events.js");
/******/ /* WEBPACK FREE VAR INJECTION */ }(require(/* __webpack_console */1)))

/******/},
/******/
/******/6: function(module, exports, require) {

eval("// Derived from Tom Wu's jsbn code.\n//\n// Changes made for clean up and to package as a node.js module.\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Basic JavaScript BN library - subset useful for RSA encryption.\n// Extended JavaScript BN functions, required for RSA private ops.\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\nvar BigInteger = function BigInteger(a,b,c) {\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n};\n\n// return new, unset BigInteger\nvar nbi\t= function nbi() { return new BigInteger(null); };\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this[i++]+w[j]+c;\n    c = Math.floor(v/0x4000000);\n    w[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this[i]&0x7fff;\n    var h = this[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this[i]&0x3fff;\n    var h = this[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w[j++] = l&0xfffffff;\n  }\n  return c;\n}\n\nif(j_lm && 'undefined' !== typeof navigator && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && 'undefined' !== typeof navigator && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this[0] = x;\n  else if(x < -1) this[0] = x+DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this[this.t++] = (x>>(this.DB-sh));\n    }\n    else\n      this[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  if(k == 8 && (s[0]&0x80) != 0) {\n    this.s = -1;\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this[i]&((1<<p)-1))<<(k-p);\n        d |= this[--i]>>(p+=this.DB-k);\n      }\n      else {\n        d = (this[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n  for(i = n-1; i >= 0; --i) r[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r[i+ds+1] = (this[i]>>cbs)|c;\n    c = (this[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r[0] = this[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r[i-ds-1] |= (this[i]&bm)<<cbs;\n    r[i-ds] = this[i]>>bs;\n  }\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]-a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r[i++] = this.DV+c;\n  else if(c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x[i],r,2*i,0,1);\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r[i+x.t] -= x.DV;\n      r[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm[pm.t-1]);\t// normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n  else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;\t\t// y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)\t// pad x so am has enough room later\n    x[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// (public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if(this.s < 0) {\n    if(this.t == 1) return this[0]-this.DV;\n    else if(this.t == 0) return -1;\n  }\n  else if(this.t == 1) return this[0];\n  else if(this.t == 0) return 0;\n  // assumes 16 < DB < 32\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n}\n\n// (public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if(this.s < 0) return -1;\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n  else return 1;\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if(b == null) b = 10;\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b,cs);\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n  this.divRemTo(d,y,z);\n  while(y.signum() > 0) {\n    r = (a+z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d,y,z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s,b) {\n  this.fromInt(0);\n  if(b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n  for(var i = 0; i < s.length; ++i) {\n    var x = intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n      continue;\n    }\n    w = b*w+x;\n    if(++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w,0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if(j > 0) {\n    this.dMultiply(Math.pow(b,j));\n    this.dAddOffset(w,0);\n  }\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a,b,c) {\n  if(\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if(a < 2) this.fromInt(1);\n    else {\n      this.fromNumber(a,c);\n      if(!this.testBit(a-1))\t// force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n      if(this.isEven()) this.dAddOffset(1,0); // force odd\n      while(!this.isProbablePrime(b)) {\n        this.dAddOffset(2,0);\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n      }\n    }\n  }\n  else {\n    // new BigInteger(int,RNG)\n    var x = new Array(), t = a&7;\n    x.length = (a>>3)+1;\n    b.nextBytes(x);\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n    this.fromString(x,256);\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var i = this.t, r = new Array();\n  r[0] = this.s;\n  var p = this.DB-(i*this.DB)%8, d, k = 0;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n      r[k++] = d|(this.s<<(this.DB-p));\n    while(i >= 0) {\n      if(p < 8) {\n        d = (this[i]&((1<<p)-1))<<(8-p);\n        d |= this[--i]>>(p+=this.DB-8);\n      }\n      else {\n        d = (this[i]>>(p-=8))&0xff;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if((d&0x80) != 0) d |= -256;\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n      if(k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n  return r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\n  var i, f, m = Math.min(a.t,this.t);\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n  if(a.t < this.t) {\n    f = a.s&this.DM;\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n    r.t = this.t;\n  }\n  else {\n    f = this.s&this.DM;\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n    r.t = a.t;\n  }\n  r.s = op(this.s,a.s);\n  r.clamp();\n}\n\n// (public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n// (public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n// (public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n// (public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n// (public) ~this\nfunction bnNot() {\n  var r = nbi();\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n  return r;\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n  return r;\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if(x == 0) return -1;\n  var r = 0;\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }\n  if((x&0xff) == 0) { x >>= 8; r += 8; }\n  if((x&0xf) == 0) { x >>= 4; r += 4; }\n  if((x&3) == 0) { x >>= 2; r += 2; }\n  if((x&1) == 0) ++r;\n  return r;\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for(var i = 0; i < this.t; ++i)\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);\n  if(this.s < 0) return this.t*this.DB;\n  return -1;\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while(x != 0) { x &= x-1; ++r; }\n  return r;\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0, x = this.s&this.DM;\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n  return r;\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n/this.DB);\n  if(j >= this.t) return(this.s!=0);\n  return((this[j]&(1<<(n%this.DB)))!=0);\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r,op,r);\n  return r;\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n// (protected) r = this + a\nfunction bnpAddTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]+a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c += a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c += a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c > 0) r[i++] = c;\n  else if(c < -1) r[i++] = this.DV+c;\n  r.t = i;\n  r.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n// (public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n// (public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n// (public) this^2\nfunction bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n// (public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n// (public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(), r = nbi();\n  this.divRemTo(a,q,r);\n  return new Array(q,r);\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);\n  ++this.t;\n  this.clamp();\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\n  if(n == 0) return;\n  while(this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while(this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if(++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n// (public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\n  var i = Math.min(this.t+a.t,n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while(i > 0) r[--i] = 0;\n  var j;\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n  r.clamp();\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n  --n;\n  var i = r.t = this.t+a.t-n;\n  r.s = 0; // assumes a,this >= 0\n  while(--i >= 0) r[i] = 0;\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n  r.clamp();\n  r.drShiftTo(1,r);\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n  else if(x.compareTo(this.m) < 0) return x;\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t-1,this.r2);\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n  x.subTo(this.r2,x);\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\n  var i = e.bitLength(), k, r = nbv(1), z;\n  if(i <= 0) return r;\n  else if(i < 18) k = 1;\n  else if(i < 48) k = 3;\n  else if(i < 144) k = 4;\n  else if(i < 768) k = 5;\n  else k = 6;\n  if(i < 8)\n    z = new Classic(m);\n  else if(m.isEven())\n    z = new Barrett(m);\n  else\n    z = new Montgomery(m);\n\n  // precomputation\n  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n  g[1] = z.convert(this);\n  if(k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1],g2);\n    while(n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2,g[n-2],g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n  i = nbits(e[j])-1;\n  while(j >= 0) {\n    if(i >= k1) w = (e[j]>>(i-k1))&km;\n    else {\n      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n    }\n\n    n = k;\n    while((w&1) == 0) { w >>= 1; --n; }\n    if((i -= n) < 0) { i += this.DB; --j; }\n    if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    }\n    else {\n      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n      z.mulTo(r2,g[w],r);\n    }\n\n    while(j >= 0 && (e[j]&(1<<i)) == 0) {\n      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n      if(--i < 0) { i = this.DB-1; --j; }\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s<0)?this.negate():this.clone();\n  var y = (a.s<0)?a.negate():a.clone();\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n  if(g < 0) return x;\n  if(i < g) g = i;\n  if(g > 0) {\n    x.rShiftTo(g,x);\n    y.rShiftTo(g,y);\n  }\n  while(x.signum() > 0) {\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n    if(x.compareTo(y) >= 0) {\n      x.subTo(y,x);\n      x.rShiftTo(1,x);\n    }\n    else {\n      y.subTo(x,y);\n      y.rShiftTo(1,y);\n    }\n  }\n  if(g > 0) y.lShiftTo(g,y);\n  return y;\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if(n <= 0) return 0;\n  var d = this.DV%n, r = (this.s<0)?n-1:0;\n  if(this.t > 0)\n    if(d == 0) r = this[0]%n;\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n  return r;\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(), v = this.clone();\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n  while(u.signum() != 0) {\n    while(u.isEven()) {\n      u.rShiftTo(1,u);\n      if(ac) {\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n        a.rShiftTo(1,a);\n      }\n      else if(!b.isEven()) b.subTo(m,b);\n      b.rShiftTo(1,b);\n    }\n    while(v.isEven()) {\n      v.rShiftTo(1,v);\n      if(ac) {\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n        c.rShiftTo(1,c);\n      }\n      else if(!d.isEven()) d.subTo(m,d);\n      d.rShiftTo(1,d);\n    }\n    if(u.compareTo(v) >= 0) {\n      u.subTo(v,u);\n      if(ac) a.subTo(c,a);\n      b.subTo(d,b);\n    }\n    else {\n      v.subTo(u,v);\n      if(ac) c.subTo(a,c);\n      d.subTo(b,d);\n    }\n  }\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if(d.compareTo(m) >= 0) return d.subtract(m);\n  if(d.signum() < 0) d.addTo(m,d); else return d;\n  if(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs();\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n    for(i = 0; i < lowprimes.length; ++i)\n      if(x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if(x.isEven()) return false;\n  i = 1;\n  while(i < lowprimes.length) {\n    var m = lowprimes[i], j = i+1;\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while(i < j) if(m%lowprimes[i++] == 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if(k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = (t+1)>>1;\n  if(t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n  for(var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n    var y = a.modPow(r,this);\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while(j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2,this);\n        if(y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n      if(y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n// public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n// BigInteger interfaces not implemented in jsbn:\n\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\nexports.nbi\t    = nbi;\nexports.BigInteger  = BigInteger;\n\n// vim:sw=2:sts=2:ts=8:et\n\n\n// WEBPACK FOOTER //\n// module.id = 9\n// module.realId = 6\n// module.chunks = main\n//@ sourceURL=webpack-module:///./jsbn.js");

/******/},
/******/
/******/7: function(module, exports, require) {

/******/ /* WEBPACK FREE VAR INJECTION */ (function(console) {
eval("// Remote access to a server.\n// - We never send binary data.\n// - We use the W3C interface for node and browser compatibility:\n//   http://www.w3.org/TR/websockets/#the-websocket-interface\n//\n// This class is intended for both browser and node.js use.\n//\n// This class is designed to work via peer protocol via either the public or\n// private websocket interfaces.  The JavaScript class for the peer protocol\n// has not yet been implemented. However, this class has been designed for it\n// to be a very simple drop option.\n//\n// YYY Will later provide js/network.js which will transparently use multiple\n// instances of this class for network access.\n//\n\n// npm\nvar WebSocket     = require(9);\n\nvar EventEmitter  = require(5).EventEmitter;\nvar Amount        = require(2).Amount;\nvar Currency      = require(2).Currency;\nvar UInt160       = require(2).UInt160;\n\nvar utils         = require(8);\n\n// Request events emitted:\n// 'success' : Request successful.\n// 'error'   : Request failed.\n//   'remoteError'\n//   'remoteUnexpected'\n//   'remoteDisconnected'\nvar Request = function (remote, command) {\n  var self  = this;\n\n  this.message    = {\n    'command' : command,\n    'id'      : undefined,\n  };\n  this.remote     = remote;\n  this.requested  = false;\n};\n\nRequest.prototype  = new EventEmitter;\n\n// Send the request to a remote.\nRequest.prototype.request = function (remote) {\n  if (!this.requested) {\n    this.requested  = true;\n    this.remote.request(this);\n    this.emit('request', remote);\n  }\n};\n\nRequest.prototype.build_path = function (build) {\n  if (build)\n    this.message.build_path = true;\n\n  return this;\n};\n\nRequest.prototype.ledger_choose = function (current) {\n  if (current)\n  {\n    this.message.ledger_index = this.remote._ledger_current_index;\n  }\n  else {\n    this.message.ledger_hash  = this.remote._ledger_hash;\n  }\n\n  return this;\n};\n\n// Set the ledger for a request.\n// - ledger_entry\n// - transaction_entry\nRequest.prototype.ledger_hash = function (h) {\n  this.message.ledger_hash  = h;\n\n  return this;\n};\n\n// Set the ledger_index for a request.\n// - ledger_entry\nRequest.prototype.ledger_index = function (ledger_index) {\n  this.message.ledger_index  = ledger_index;\n\n  return this;\n};\n\nRequest.prototype.account_root = function (account) {\n  this.message.account_root  = UInt160.json_rewrite(account);\n\n  return this;\n};\n\nRequest.prototype.index = function (hash) {\n  this.message.index  = hash;\n\n  return this;\n};\n\n// Provide the information id an offer.\n// --> account\n// --> seq : sequence number of transaction creating offer (integer)\nRequest.prototype.offer_id = function (account, seq) {\n  this.message.offer = {\n    'account' : UInt160.json_rewrite(account),\n    'seq' : seq\n  };\n\n  return this;\n};\n\n// --> index : ledger entry index.\nRequest.prototype.offer_index = function (index) {\n  this.message.offer  = index;\n\n  return this;\n};\n\nRequest.prototype.secret = function (s) {\n  if (s)\n    this.message.secret  = s;\n\n  return this;\n};\n\nRequest.prototype.tx_hash = function (h) {\n  this.message.tx_hash  = h;\n\n  return this;\n};\n\nRequest.prototype.tx_json = function (j) {\n  this.message.tx_json  = j;\n\n  return this;\n};\n\nRequest.prototype.ripple_state = function (account, issuer, currency) {\n  this.message.ripple_state  = {\n      'accounts' : [\n        UInt160.json_rewrite(account),\n        UInt160.json_rewrite(issuer)\n      ],\n      'currency' : currency\n    };\n\n  return this;\n};\n\nRequest.prototype.accounts = function (accounts, realtime) {\n  if (\"object\" !== typeof accounts) {\n    accounts = [accounts];\n  }\n\n  // Process accounts parameters\n  var procAccounts = [];\n  for (var i = 0, l = accounts.length; i < l; i++) {\n    procAccounts.push(UInt160.json_rewrite(accounts[i]));\n  }\n  if (realtime) {\n    this.message.rt_accounts = procAccounts;\n  } else {\n    this.message.accounts = procAccounts;\n  }\n\n  return this;\n};\n\nRequest.prototype.rt_accounts = function (accounts) {\n  return this.accounts(accounts, true);\n};\n\n//\n// Remote - access to a remote Ripple server via websocket.\n//\n// Events:\n// 'connected'\n// 'disconnected'\n// 'state':\n// - 'online' : connected and subscribed\n// - 'offline' : not subscribed or not connected.\n// 'ledger_closed': A good indicate of ready to serve.\n// 'subscribed' : This indicates stand-alone is available.\n//\n\n// --> trusted: truthy, if remote is trusted\nvar Remote = function (opts, trace) {\n  this.trusted                = opts.trusted;\n  this.websocket_ip           = opts.websocket_ip;\n  this.websocket_port         = opts.websocket_port;\n  this.websocket_ssl          = opts.websocket_ssl;\n  this.local_sequence         = opts.local_sequence; // Locally track sequence numbers\n  this.local_fee              = opts.local_fee;      // Locally set fees\n  this.id                     = 0;\n  this.trace                  = opts.trace || trace;\n  this._ledger_current_index  = undefined;\n  this._ledger_hash           = undefined;\n  this._ledger_time           = undefined;\n  this._stand_alone           = undefined;\n  this._testnet               = undefined;\n  this.online_target          = false;\n  this.online_state           = 'closed';         // 'open', 'closed', 'connecting', 'closing'\n  this.state                  = 'offline';        // 'online', 'offline'\n  this.retry_timer            = undefined;\n  this.retry                  = undefined;\n\n  this._load_base             = 256;\n  this._load_fee              = 256;\n  this._load_base             = undefined;\n  this._load_fee              = undefined;\n  this._reserve_base          = undefined;\n  this._reserve_inc           = undefined;\n  this._server_status         = undefined;\n\n  // Cache information for accounts.\n  this.accounts = {\n    // Consider sequence numbers stable if you know you're not generating bad transactions.\n    // Otherwise, clear it to have it automatically refreshed from the network.\n\n    // account : { seq : __ }\n\n    };\n\n  // List of secrets that we know about.\n  this.secrets = {\n    // Secrets can be set by calling set_secret(account, secret).\n\n    // account : secret\n  };\n\n  // Cache for various ledgers.\n  // XXX Clear when ledger advances.\n  this.ledgers = {\n    'current' : {\n      'account_root' : {}\n    }\n  };\n};\n\nRemote.prototype      = new EventEmitter;\n\nRemote.from_config = function (obj, trace) {\n  var serverConfig = 'string' === typeof obj ? exports.config.servers[obj] : obj;\n\n  var remote = new Remote(serverConfig, trace);\n\n  for (var account in exports.config.accounts) {\n    var accountInfo = exports.config.accounts[account];\n    if (\"object\" === typeof accountInfo) {\n      if (accountInfo.secret) {\n        // Index by nickname ...\n        remote.set_secret(account, accountInfo.secret);\n        // ... and by account ID\n        remote.set_secret(accountInfo.account, accountInfo.secret);\n      }\n    }\n  }\n\n  return remote;\n};\n\nvar isTemMalformed  = function (engine_result_code) {\n  return (engine_result_code >= -299 && engine_result_code <  199);\n};\n\nvar isTefFailure = function (engine_result_code) {\n  return (engine_result_code >= -299 && engine_result_code <  199);\n};\n\nRemote.flags = {\n  'OfferCreate' : {\n    'Passive'                 : 0x00010000,\n  },\n\n  'Payment' : {\n    'NoRippleDirect'          : 0x00010000,\n    'PartialPayment'          : 0x00020000,\n    'LimitQuality'            : 0x00040000,\n  },\n};\n\n// XXX This needs to be determined from the network.\nRemote.fees = {\n  'default'         : Amount.from_json(\"10\"),\n  'nickname_create' : Amount.from_json(\"1000\"),\n  'offer'           : Amount.from_json(\"10\"),\n};\n\n// Set the emitted state: 'online' or 'offline'\nRemote.prototype._set_state = function (state) {\n  if (this.trace) console.log(\"remote: set_state: %s\", state);\n\n  if (this.state !== state) {\n    this.state = state;\n\n    this.emit('state', state);\n\n    switch (state) {\n      case 'online':\n        this.online_state       = 'open';\n        this.emit('connected');\n        break;\n\n      case 'offline':\n        this.online_state       = 'closed';\n        this.emit('disconnected');\n        break;\n    }\n  }\n};\n\nRemote.prototype.set_trace = function (trace) {\n  this.trace  = undefined === trace || trace;\n\n  return this;\n};\n\n// Set the target online state. Defaults to false.\nRemote.prototype.connect = function (online) {\n  var target  = undefined === online || online;\n\n  if (this.online_target != target) {\n    this.online_target  = target;\n\n    // If we were in a stable state, go dynamic.\n    switch (this.online_state) {\n      case 'open':\n        if (!target) this._connect_stop();\n        break;\n\n      case 'closed':\n        if (target) this._connect_retry();\n        break;\n    }\n  }\n\n  return this;\n};\n\nRemote.prototype.ledger_hash = function () {\n  return this._ledger_hash;\n};\n\n// Stop from open state.\nRemote.prototype._connect_stop = function () {\n  delete this.ws.onerror;\n  delete this.ws.onclose;\n\n  this.ws.terminate();\n  delete this.ws;\n\n  this._set_state('offline');\n};\n\n// Implictly we are not connected.\nRemote.prototype._connect_retry = function () {\n  var self  = this;\n\n  if (!self.online_target) {\n    // Do not continue trying to connect.\n    this._set_state('offline');\n  }\n  else if ('connecting' !== this.online_state) {\n    // New to connecting state.\n    this.online_state = 'connecting';\n    this.retry        = 0;\n\n    this._set_state('offline'); // Report newly offline.\n    this._connect_start();\n  }\n  else\n  {\n    // Delay and retry.\n    this.retry        += 1;\n    this.retry_timer  =  setTimeout(function () {\n        if (self.trace) console.log(\"remote: retry\");\n\n        if (self.online_target) {\n          self._connect_start();\n        }\n        else {\n          self._connect_retry();\n        }\n      }, this.retry < 40\n          ? 1000/20           // First, for 2 seconds: 20 times per second\n          : this.retry < 40+60\n            ? 1000            // Then, for 1 minute: once per second\n            : this.retry < 40+60+60\n              ? 10*1000       // Then, for 10 minutes: once every 10 seconds\n              : 30*1000);     // Then: once every 30 seconds\n  }\n};\n\nRemote.prototype._connect_start = function () {\n  // Note: as a browser client can't make encrypted connections to random ips\n  // with self-signed certs as the user must have pre-approved the self-signed certs.\n\n  var self = this;\n  var url  = (this.websocket_ssl ? \"wss://\" : \"ws://\") +\n        this.websocket_ip + \":\" + this.websocket_port;\n\n  if (this.trace) console.log(\"remote: connect: %s\", url);\n\n  var ws = this.ws = new WebSocket(url);\n\n  ws.response = {};\n\n  ws.onopen = function () {\n    if (self.trace) console.log(\"remote: onopen: %s: online_target=%s\", ws.readyState, self.online_target);\n\n    ws.onerror = function () {\n      if (self.trace) console.log(\"remote: onerror: %s\", ws.readyState);\n\n      delete ws.onclose;\n\n      self._connect_retry();\n    };\n\n    ws.onclose = function () {\n      if (self.trace) console.log(\"remote: onclose: %s\", ws.readyState);\n\n      delete ws.onerror;\n\n      self._connect_retry();\n    };\n\n    if (self.online_target) {\n      // Note, we could get disconnected before this goes through.\n      self._server_subscribe();     // Automatically subscribe.\n    }\n    else {\n      self._connect_stop();\n    }\n  };\n\n  ws.onerror = function () {\n    if (self.trace) console.log(\"remote: onerror: %s\", ws.readyState);\n\n    delete ws.onclose;\n\n    self._connect_retry();\n  };\n\n  // Failure to open.\n  ws.onclose = function () {\n    if (self.trace) console.log(\"remote: onclose: %s\", ws.readyState);\n\n    delete ws.onerror;\n\n    self._connect_retry();\n  };\n\n  ws.onmessage = function (json) {\n    self._connect_message(ws, json.data);\n  };\n};\n\n// It is possible for messages to be dispatched after the connection is closed.\nRemote.prototype._connect_message = function (ws, json) {\n  var message     = JSON.parse(json);\n  var unexpected  = false;\n  var request;\n\n  if ('object' !== typeof message) {\n    unexpected  = true;\n  }\n  else {\n    switch (message.type) {\n      case 'response':\n        // A response to a request.\n        {\n          request         = ws.response[message.id];\n\n          if (!request) {\n            unexpected  = true;\n          }\n          else if ('success' === message.status) {\n            if (this.trace) utils.logObject(\"remote: response: %s\", message);\n\n            request.emit('success', message.result);\n          }\n          else if (message.error) {\n            if (this.trace) utils.logObject(\"remote: error: %s\", message);\n\n            request.emit('error', {\n                'error'         : 'remoteError',\n                'error_message' : 'Remote reported an error.',\n                'remote'        : message,\n              });\n          }\n        }\n        break;\n\n      case 'ledgerClosed':\n        // XXX If not trusted, need to verify we consider ledger closed.\n        // XXX Also need to consider a slow server or out of order response.\n        // XXX Be more defensive fields could be missing or of wrong type.\n        // YYY Might want to do some cache management.\n\n        this._ledger_time           = message.ledger_time;\n        this._ledger_hash           = message.ledger_hash;\n        this._ledger_current_index  = message.ledger_index + 1;\n\n        this.emit('ledger_closed', message);\n        break;\n\n      case 'serverStatus':\n        // This message is only received when online. As we are connected, it is the definative final state.\n        this._set_state(\n          message.server_status === 'tracking' ||  message.server_status === 'full'\n            ? 'online'\n            : 'offline');\n        break;\n\n      // All other messages\n      default:\n        if (this.trace) utils.logObject(\"remote: \"+message.type+\": %s\", message);\n        this.emit('net_'+message.type, message);\n        break;\n    }\n  }\n\n  if (!unexpected) {\n  }\n  // Unexpected response from remote.\n  // XXX This isn't so robust. Hard fails should probably only happen in a debugging scenairo.\n  else if (this.trusted) {\n    // Remote is trusted, report an error.\n    console.log(\"unexpected message from trusted remote: %s\", json);\n\n    (request || this).emit('error', {\n        'error' : 'remoteUnexpected',\n        'error_message' : 'Unexpected response from remote.'\n      });\n  }\n  else {\n    // Treat as a disconnect.\n    if (this.trace) console.log(\"unexpected message from untrusted remote: %s\", json);\n\n    // XXX All pending request need this treatment and need to actionally disconnect.\n    (request || this).emit('error', {\n        'error' : 'remoteDisconnected',\n        'error_message' : 'Remote disconnected.'\n      });\n  }\n};\n\n// Send a request.\n// <-> request: what to send, consumed.\nRemote.prototype.request = function (request) {\n  if (this.ws) {\n    // Only bother if we are still connected.\n\n    this.ws.response[request.message.id = this.id] = request;\n\n    this.id += 1;   // Advance id.\n\n    if (this.trace) utils.logObject(\"remote: request: %s\", request.message);\n\n    this.ws.send(JSON.stringify(request.message));\n  }\n  else {\n    if (this.trace) utils.logObject(\"remote: request: DROPPING: %s\", request.message);\n  }\n};\n\nRemote.prototype.request_server_info = function () {\n  return new Request(this, 'server_info');\n};\n\n// XXX This is a bad command. Some varients don't scale.\n// XXX Require the server to be trusted.\nRemote.prototype.request_ledger = function (ledger, full) {\n  //utils.assert(this.trusted);\n\n  var request = new Request(this, 'ledger');\n\n  if (ledger)\n    request.message.ledger  = ledger;\n\n  if (full)\n    request.message.full    = true;\n\n  return request;\n};\n\n// Only for unit testing.\nRemote.prototype.request_ledger_hash = function () {\n  //utils.assert(this.trusted);   // If not trusted, need to check proof.\n\n  return new Request(this, 'ledger_closed');\n};\n\n// .ledger()\n// .ledger_index()\nRemote.prototype.request_ledger_header = function () {\n  return new Request(this, 'ledger_header');\n};\n\n// Get the current proposed ledger entry.  May be closed (and revised) at any time (even before returning).\n// Only for unit testing.\nRemote.prototype.request_ledger_current = function () {\n  return new Request(this, 'ledger_current');\n};\n\n// --> type : the type of ledger entry.\n// .ledger()\n// .ledger_index()\n// .offer_id()\nRemote.prototype.request_ledger_entry = function (type) {\n  //utils.assert(this.trusted);   // If not trusted, need to check proof, maybe talk packet protocol.\n\n  var self    = this;\n  var request = new Request(this, 'ledger_entry');\n\n  // Transparent caching. When .request() is invoked, look in the Remote object for the result.\n  // If not found, listen, cache result, and emit it.\n  //\n  // Transparent caching:\n  if ('account_root' === type) {\n    request.request_default = request.request;\n\n    request.request         = function () {                        // Intercept default request.\n      var bDefault  = true;\n      // .self = Remote\n      // this = Request\n\n      // console.log('request_ledger_entry: caught');\n\n      if (self._ledger_hash) {\n        // A specific ledger is requested.\n\n        // XXX Add caching.\n      }\n      // else if (req.ledger_index)\n      // else if ('ripple_state' === request.type)         // YYY Could be cached per ledger.\n      else if ('account_root' === type) {\n        var cache = self.ledgers.current.account_root;\n\n        if (!cache)\n        {\n          cache = self.ledgers.current.account_root = {};\n        }\n\n        var node = self.ledgers.current.account_root[request.message.account_root];\n\n        if (node) {\n          // Emulate fetch of ledger entry.\n          // console.log('request_ledger_entry: emulating');\n          request.emit('success', {\n              // YYY Missing lots of fields.\n              'node' :  node,\n            });\n\n          bDefault  = false;\n        }\n        else {\n          // Was not cached.\n\n          // XXX Only allow with trusted mode.  Must sync response with advance.\n          switch (type) {\n            case 'account_root':\n              request.on('success', function (message) {\n                  // Cache node.\n                  // console.log('request_ledger_entry: caching');\n                  self.ledgers.current.account_root[message.node.Account] = message.node;\n                });\n              break;\n\n            default:\n              // This type not cached.\n              // console.log('request_ledger_entry: non-cached type');\n          }\n        }\n      }\n\n      if (bDefault) {\n        // console.log('request_ledger_entry: invoking');\n        request.request_default();\n      }\n    }\n  };\n\n  return request;\n};\n\nRemote.prototype.request_subscribe = function (streams) {\n  var request = new Request(this, 'subscribe');\n\n  if (streams) {\n    if (\"object\" !== typeof streams) {\n      streams = [streams];\n    }\n    request.message.streams = streams;\n  }\n\n  return request;\n};\n\nRemote.prototype.request_unsubscribe = function (streams) {\n  var request = new Request(this, 'unsubscribe');\n\n  if (streams) {\n    if (\"object\" !== typeof streams) {\n      streams = [streams];\n    }\n    request.message.streams = streams;\n  }\n\n  return request;\n};\n\n// --> current: true, for the current ledger.\nRemote.prototype.request_transaction_entry = function (hash, current) {\n  //utils.assert(this.trusted);   // If not trusted, need to check proof, maybe talk packet protocol.\n\n  return (new Request(this, 'transaction_entry'))\n    .ledger_choose(current)\n    .tx_hash(hash);\n};\n\n// --> account_index: sub_account index (optional)\n// --> current: true, for the current ledger.\nRemote.prototype.request_account_lines = function (accountID, account_index, current) {\n  // XXX Does this require the server to be trusted?\n  //utils.assert(this.trusted);\n\n  var request = new Request(this, 'account_lines');\n\n  request.message.account = UInt160.json_rewrite(accountID);\n\n  if (account_index)\n    request.message.index   = account_index;\n\n  return request\n    .ledger_choose(current);\n};\n\n// --> account_index: sub_account index (optional)\n// --> current: true, for the current ledger.\nRemote.prototype.request_account_offers = function (accountID, account_index, current) {\n  var request = new Request(this, 'account_offers');\n\n  request.message.account = UInt160.json_rewrite(accountID);\n\n  if (account_index)\n    request.message.index   = account_index;\n\n  return request\n    .ledger_choose(current);\n};\n\nRemote.prototype.request_account_tx = function (accountID, ledger_min, ledger_max) {\n  // XXX Does this require the server to be trusted?\n  //utils.assert(this.trusted);\n\n  var request = new Request(this, 'account_tx');\n\n  request.message.account     = accountID;\n\n  if (ledger_min === ledger_max) {\n    request.message.ledger      = ledger_min;\n  }\n  else {\n    request.message.ledger_min  = ledger_min;\n    request.message.ledger_max  = ledger_max;\n  }\n\n  return request;\n};\n\nRemote.prototype.request_ledger = function (ledger, full) {\n  var request = new Request(this, 'ledger');\n\n  request.message.ledger = ledger;\n\n  if (full)\n    request.message.full = true;\n\n  return request;\n};\n\nRemote.prototype.request_wallet_accounts = function (seed) {\n  utils.assert(this.trusted);     // Don't send secrets.\n\n  var request = new Request(this, 'wallet_accounts');\n\n  request.message.seed = seed;\n\n  return request;\n};\n\n// Submit a transaction.\nRemote.prototype.submit = function (transaction) {\n  var self  = this;\n\n  if (transaction._secret && !this.trusted)\n  {\n    transaction.emit('error', {\n        'result'          : 'tejServerUntrusted',\n        'result_message'  : \"Attempt to give a secret to an untrusted server.\"\n      });\n  }\n  else {\n    if (self.local_sequence && !transaction.tx_json.Sequence) {\n      transaction.tx_json.Sequence      = this.account_seq(transaction.tx_json.Account, 'ADVANCE');\n      // console.log(\"Sequence: %s\", transaction.tx_json.Sequence);\n    }\n\n    if (self.local_sequence && !transaction.tx_json.Sequence) {\n      // Look in the last closed ledger.\n      this.account_seq_cache(transaction.tx_json.Account, false)\n        .on('success_account_seq_cache', function () {\n            // Try again.\n            self.submit(transaction);\n          })\n        .on('error_account_seq_cache', function (message) {\n            // XXX Maybe be smarter about this. Don't want to trust an untrusted server for this seq number.\n\n            // Look in the current ledger.\n            self.account_seq_cache(transaction.tx_json.Account, 'CURRENT')\n              .on('success_account_seq_cache', function () {\n                  // Try again.\n                  self.submit(transaction);\n                })\n              .on('error_account_seq_cache', function (message) {\n                  // Forward errors.\n                  transaction.emit('error', message);\n                })\n              .request();\n          })\n        .request();\n    }\n    else {\n      // Convert the transaction into a request and submit it.\n\n      (new Request(this, 'submit'))\n        .build_path(transaction._build_path)\n        .tx_json(transaction.tx_json)\n        .secret(transaction._secret)\n        .on('success', function (message) { transaction.emit('success', message); }) // Forward successes and errors.\n        .on('error', function (message) { transaction.emit('error', message); })\n        .request();\n    }\n  }\n};\n\n//\n// Higher level functions.\n//\n\n// Subscribe to a server to get 'ledger_closed' events.\n// 'subscribed' : This command was successful.\n// 'ledger_closed : ledger_closed and ledger_current_index are updated.\nRemote.prototype._server_subscribe = function () {\n  var self  = this;\n\n  this.request_subscribe([ 'ledger', 'server' ])\n    .on('success', function (message) {\n        self._stand_alone       = !!message.stand_alone;\n        self._testnet           = !!message.testnet;\n\n        if (message.random)\n          self.emit('random', utils.hexToArray(message.random));\n\n        if (message.ledger_hash && message.ledger_index) {\n          self._ledger_time           = message.ledger_time;\n          self._ledger_hash           = message.ledger_hash;\n          self._ledger_current_index  = message.ledger_index+1;\n\n          self.emit('ledger_closed', message);\n        }\n\n        // FIXME Use this to estimate fee.\n        self._load_base     = message.load_base || 256;\n        self._load_fee      = message.load_fee || 256;\n        self._load_base     = message.fee_ref;\n        self._load_fee      = message.fee_base;\n        self._reserve_base  = message.reverse_base;\n        self._reserve_inc   = message.reserve_inc;\n        self._server_status = message.server_status;\n\n        if (message.server_status === 'tracking' ||  message.server_status === 'full') {\n          self._set_state('online');\n        }\n\n        self.emit('subscribed');\n      })\n    .request();\n\n  // XXX Could give error events, maybe even time out.\n\n  return this;\n};\n\n// For unit testing: ask the remote to accept the current ledger.\n// - To be notified when the ledger is accepted, server_subscribe() then listen to 'ledger_hash' events.\n// A good way to be notified of the result of this is:\n//    remote.once('ledger_closed', function (ledger_closed, ledger_index) { ... } );\nRemote.prototype.ledger_accept = function () {\n  if (this._stand_alone || undefined === this._stand_alone)\n  {\n    var request = new Request(this, 'ledger_accept');\n\n    request\n      .request();\n  }\n  else {\n    this.emit('error', {\n        'error' : 'notStandAlone'\n      });\n  }\n\n  return this;\n};\n\n// Return a request to refresh the account balance.\nRemote.prototype.request_account_balance = function (account, current) {\n  var request = this.request_ledger_entry('account_root');\n\n  return request\n    .account_root(account)\n    .ledger_choose(current)\n    .on('success', function (message) {\n        // If the caller also waits for 'success', they might run before this.\n        request.emit('account_balance', Amount.from_json(message.node.Balance));\n      });\n};\n\n// Return a request to emit the owner count.\nRemote.prototype.request_owner_count = function (account, current) {\n  var request = this.request_ledger_entry('account_root');\n\n  return request\n    .account_root(account)\n    .ledger_choose(current)\n    .on('success', function (message) {\n        // If the caller also waits for 'success', they might run before this.\n        request.emit('owner_count', message.node.OwnerCount);\n      });\n};\n\n// Return the next account sequence if possible.\n// <-- undefined or Sequence\nRemote.prototype.account_seq = function (account, advance) {\n  var account       = UInt160.json_rewrite(account);\n  var account_info  = this.accounts[account];\n  var seq;\n\n  if (account_info && account_info.seq)\n  {\n    seq = account_info.seq;\n\n    if (advance) account_info.seq += 1;\n\n    // console.log(\"cached: %s current=%d next=%d\", account, seq, account_info.seq);\n  }\n  else {\n    // console.log(\"uncached: %s\", account);\n  }\n\n  return seq;\n}\n\nRemote.prototype.set_account_seq = function (account, seq) {\n  var account       = UInt160.json_rewrite(account);\n\n  if (!this.accounts[account]) this.accounts[account] = {};\n\n  this.accounts[account].seq = seq;\n}\n\n// Return a request to refresh accounts[account].seq.\nRemote.prototype.account_seq_cache = function (account, current) {\n  var self    = this;\n  var request;\n\n  if (!self.accounts[account]) self.accounts[account] = {};\n\n  var account_info = self.accounts[account];\n\n  request = account_info.caching_seq_request;\n  if (!request) {\n    // console.log(\"starting: %s\", account);\n    request = self.request_ledger_entry('account_root')\n      .account_root(account)\n      .ledger_choose(current)\n      .on('success', function (message) {\n          delete account_info.caching_seq_request;\n\n          var seq = message.node.Sequence;\n\n          account_info.seq  = seq;\n\n          // console.log(\"caching: %s %d\", account, seq);\n          // If the caller also waits for 'success', they might run before this.\n          request.emit('success_account_seq_cache', message);\n        })\n      .on('error', function (message) {\n          // console.log(\"error: %s\", account);\n          delete account_info.caching_seq_request;\n\n          request.emit('error_account_seq_cache', message);\n        });\n\n    account_info.caching_seq_request    = request;\n  }\n\n  return request;\n};\n\n// Mark an account's root node as dirty.\nRemote.prototype.dirty_account_root = function (account) {\n  var account       = UInt160.json_rewrite(account);\n\n  delete this.ledgers.current.account_root[account];\n};\n\n// Store a secret - allows the Remote to automatically fill out auth information.\nRemote.prototype.set_secret = function (account, secret) {\n  this.secrets[account] = secret;\n};\n\n\n// Return a request to get a ripple balance.\n//\n// --> account: String\n// --> issuer: String\n// --> currency: String\n// --> current: bool : true = current ledger\n//\n// If does not exist: emit('error', 'error' : 'remoteError', 'remote' : { 'error' : 'entryNotFound' })\nRemote.prototype.request_ripple_balance = function (account, issuer, currency, current) {\n  var request       = this.request_ledger_entry('ripple_state');          // YYY Could be cached per ledger.\n\n  return request\n    .ripple_state(account, issuer, currency)\n    .ledger_choose(current)\n    .on('success', function (message) {\n        var node            = message.node;\n\n        var lowLimit        = Amount.from_json(node.LowLimit);\n        var highLimit       = Amount.from_json(node.HighLimit);\n        // The amount the low account holds of issuer.\n        var balance         = Amount.from_json(node.Balance);\n        // accountHigh implies: for account: balance is negated, highLimit is the limit set by account.\n        var accountHigh     = UInt160.from_json(account).equals(highLimit.issuer());\n        // The limit set by account.\n        var accountLimit    = (accountHigh ? highLimit : lowLimit).parse_issuer(account);\n        // The limit set by issuer.\n        var issuerLimit     = (accountHigh ? lowLimit : highLimit).parse_issuer(issuer);\n        var accountBalance  = (accountHigh ? balance.negate() : balance).parse_issuer(account);\n        var issuerBalance   = (accountHigh ? balance : balance.negate()).parse_issuer(issuer);\n\n        request.emit('ripple_state', {\n          'issuer_balance'  : issuerBalance,  // Balance with dst as issuer.\n          'account_balance' : accountBalance, // Balance with account as issuer.\n          'issuer_limit'    : issuerLimit,    // Limit set by issuer with src as issuer.\n          'account_limit'   : accountLimit    // Limit set by account with dst as issuer.\n        });\n      });\n};\n\nRemote.prototype.request_ripple_path_find = function (src_account, dst_account, dst_amount, source_currencies) {\n  var self    = this;\n  var request = new Request(this, 'ripple_path_find');\n\n  request.message.source_account      = UInt160.json_rewrite(src_account);\n  request.message.destination_account = UInt160.json_rewrite(dst_account);\n  request.message.destination_amount  = Amount.json_rewrite(dst_amount);\n  request.message.source_currencies   = source_currencies.map(function (ci) {\n      var ci_new  = {};\n\n      if ('issuer' in ci)\n        ci_new.issuer   = UInt160.json_rewrite(ci.issuer);\n\n      if ('currency' in ci)\n        ci_new.currency = Currency.json_rewrite(ci.currency);\n\n      return ci_new;\n    });\n\n  return request;\n};\n\nRemote.prototype.request_unl_list = function () {\n  return new Request(this, 'unl_list');\n};\n\nRemote.prototype.request_unl_add = function (addr, comment) {\n  var request = new Request(this, 'unl_add');\n\n  request.message.node    = addr;\n\n  if (comment !== undefined)\n    request.message.comment = note;\n\n  return request;\n};\n\n// --> node: <domain> | <public_key>\nRemote.prototype.request_unl_delete = function (node) {\n  var request = new Request(this, 'unl_delete');\n\n  request.message.node = node;\n\n  return request;\n};\n\nRemote.prototype.request_peers = function () {\n  return new Request(this, 'peers');\n};\n\nRemote.prototype.request_connect = function (ip, port) {\n  var request = new Request(this, 'connect');\n\n  request.message.ip = ip;\n\n  if (port)\n    request.message.port = port;\n\n  return request;\n};\n\nRemote.prototype.transaction = function () {\n  return new Transaction(this);\n};\n\n//\n// Transactions\n//\n//  Construction:\n//    remote.transaction()  // Build a transaction object.\n//     .offer_create(...)   // Set major parameters.\n//     .set_flags()         // Set optional parameters.\n//     .on()                // Register for events.\n//     .submit();           // Send to network.\n//\n//  Events:\n// 'success' : Transaction submitted without error.\n// 'error' : Error submitting transaction.\n// 'proposed' : Advisory proposed status transaction.\n// - A client should expect 0 to multiple results.\n// - Might not get back. The remote might just forward the transaction.\n// - A success could be reverted in final.\n// - local error: other remotes might like it.\n// - malformed error: local server thought it was malformed.\n// - The client should only trust this when talking to a trusted server.\n// 'final' : Final status of transaction.\n// - Only expect a final from dishonest servers after a tesSUCCESS or ter*.\n// 'lost' : Gave up looking for on ledger_closed.\n// 'pending' : Transaction was not found on ledger_closed.\n// 'state' : Follow the state of a transaction.\n//    'client_submitted'     - Sent to remote\n//     |- 'remoteError'      - Remote rejected transaction.\n//      \\- 'client_proposed' - Remote provisionally accepted transaction.\n//       |- 'client_missing' - Transaction has not appeared in ledger as expected.\n//       | |\\- 'client_lost' - No longer monitoring missing transaction.\n//       |/\n//       |- 'tesSUCCESS'     - Transaction in ledger as expected.\n//       |- 'ter...'         - Transaction failed.\n//       \\- 'tec...'         - Transaction claimed fee only.\n//\n// Notes:\n// - All transactions including those with local and malformed errors may be\n//   forwarded anyway.\n// - A malicous server can:\n//   - give any proposed result.\n//     - it may declare something correct as incorrect or something correct as incorrect.\n//     - it may not communicate with the rest of the network.\n//   - may or may not forward.\n//\n\nvar SUBMIT_MISSING  = 4;    // Report missing.\nvar SUBMIT_LOST     = 8;    // Give up tracking.\n\n// A class to implement transactions.\n// - Collects parameters\n// - Allow event listeners to be attached to determine the outcome.\nvar Transaction = function (remote) {\n  // YYY Make private as many variables as possible.\n  var self  = this;\n\n  this.callback     = undefined;\n  this.remote       = remote;\n  this._secret      = undefined;\n  this._build_path  = false;\n  this.tx_json      = {                 // Transaction data.\n    'Flags' : 0,                        // XXX Would be nice if server did not require this.\n  };\n  this.hash         = undefined;\n  this.submit_index = undefined;        // ledger_current_index was this when transaction was submited.\n  this.state        = undefined;        // Under construction.\n\n  this.on('success', function (message) {\n      if (message.engine_result) {\n        self.hash       = message.tx_json.hash;\n\n        self.set_state('client_proposed');\n\n        self.emit('proposed', {\n            'tx_json'         : message.tx_json,\n            'result'          : message.engine_result,\n            'result_code'     : message.engine_result_code,\n            'result_message'  : message.engine_result_message,\n            'rejected'        : self.isRejected(message.engine_result_code),      // If server is honest, don't expect a final if rejected.\n          });\n      }\n    });\n\n  this.on('error', function (message) {\n        // Might want to give more detailed information.\n        self.set_state('remoteError');\n    });\n};\n\nTransaction.prototype  = new EventEmitter;\n\nTransaction.prototype.consts = {\n  'telLOCAL_ERROR'  : -399,\n  'temMALFORMED'    : -299,\n  'tefFAILURE'      : -199,\n  'terRETRY'        : -99,\n  'tesSUCCESS'      : 0,\n  'tecCLAIMED'      : 100,\n};\n\nTransaction.prototype.isTelLocal = function (ter) {\n  return ter >= this.consts.telLOCAL_ERROR && ter < this.consts.temMALFORMED;\n};\n\nTransaction.prototype.isTemMalformed = function (ter) {\n  return ter >= this.consts.temMALFORMED && ter < this.consts.tefFAILURE;\n};\n\nTransaction.prototype.isTefFailure = function (ter) {\n  return ter >= this.consts.tefFAILURE && ter < this.consts.terRETRY;\n};\n\nTransaction.prototype.isTerRetry = function (ter) {\n  return ter >= this.consts.terRETRY && ter < this.consts.tesSUCCESS;\n};\n\nTransaction.prototype.isTepSuccess = function (ter) {\n  return ter >= this.consts.tesSUCCESS;\n};\n\nTransaction.prototype.isTecClaimed = function (ter) {\n  return ter >= this.consts.tecCLAIMED;\n};\n\nTransaction.prototype.isRejected = function (ter) {\n  return this.isTelLocal(ter) || this.isTemMalformed(ter) || this.isTefFailure(ter);\n};\n\nTransaction.prototype.set_state = function (state) {\n  if (this.state !== state) {\n    this.state  = state;\n    this.emit('state', state);\n  }\n};\n\n// Submit a transaction to the network.\n// XXX Don't allow a submit without knowing ledger_index.\n// XXX Have a network canSubmit(), post events for following.\n// XXX Also give broader status for tracking through network disconnects.\n// callback = function (status, info) {\n//   // status is final status.  Only works under a ledger_accepting conditions.\n//   switch status:\n//    case 'tesSUCCESS': all is well.\n//    case 'tejServerUntrusted': sending secret to untrusted server.\n//    case 'tejInvalidAccount': locally detected error.\n//    case 'tejLost': locally gave up looking\n//    default: some other TER\n// }\nTransaction.prototype.submit = function (callback) {\n  var self    = this;\n  var tx_json = this.tx_json;\n\n  this.callback = callback;\n\n  if ('string' !== typeof tx_json.Account)\n  {\n    (this.callback || this.emit)('error', {\n        'error' : 'tejInvalidAccount',\n        'error_message' : 'Bad account.'\n      });\n    return;\n  }\n\n  // YYY Might check paths for invalid accounts.\n\n  if (this.remote.local_fee && undefined === tx_json.Fee) {\n    tx_json.Fee    = Remote.fees['default'].to_json();\n  }\n\n  if (this.callback || this.listeners('final').length || this.listeners('lost').length || this.listeners('pending').length) {\n    // There are listeners for callback, 'final', 'lost', or 'pending' arrange to emit them.\n\n    this.submit_index = this.remote._ledger_current_index;\n\n    // When a ledger closes, look for the result.\n    var on_ledger_closed = function (message) {\n        var ledger_hash   = message.ledger_hash;\n        var ledger_index  = message.ledger_index;\n        var stop          = false;\n\n// XXX make sure self.hash is available.\n        self.remote.request_transaction_entry(self.hash)\n          .ledger_hash(ledger_hash)\n          .on('success', function (message) {\n              self.set_state(message.metadata.TransactionResult);\n              self.emit('final', message);\n\n              if (self.callback)\n                self.callback(message.metadata.TransactionResult, message);\n\n              stop  = true;\n            })\n          .on('error', function (message) {\n              if ('remoteError' === message.error\n                && 'transactionNotFound' === message.remote.error) {\n                if (self.submit_index + SUBMIT_LOST < ledger_index) {\n                  self.set_state('client_lost');        // Gave up.\n                  self.emit('lost');\n\n                  if (self.callback)\n                    self.callback('tejLost', message);\n\n                  stop  = true;\n                }\n                else if (self.submit_index + SUBMIT_MISSING < ledger_index) {\n                  self.set_state('client_missing');    // We don't know what happened to transaction, still might find.\n                  self.emit('pending');\n                }\n                else {\n                  self.emit('pending');\n                }\n              }\n              // XXX Could log other unexpectedness.\n            })\n          .request();\n\n        if (stop) {\n          self.remote.removeListener('ledger_closed', on_ledger_closed);\n          self.emit('final', message);\n        }\n      };\n\n    this.remote.on('ledger_closed', on_ledger_closed);\n\n    if (this.callback) {\n      this.on('error', function (message) {\n          self.callback(message.error, message);\n        });\n    }\n  }\n\n  this.set_state('client_submitted');\n\n  this.remote.submit(this);\n\n  return this;\n}\n\n//\n// Set options for Transactions\n//\n\n// --> build: true, to have server blindly construct a path.\n//\n// \"blindly\" because the sender has no idea of the actual cost except that is must be less than send max.\nTransaction.prototype.build_path = function (build) {\n  this._build_path = build;\n\n  return this;\n}\n\nTransaction._path_rewrite = function (path) {\n  var path_new  = [];\n\n  for (var index in path) {\n    var node      = path[index];\n    var node_new  = {};\n\n    if ('account' in node)\n      node_new.account  = UInt160.json_rewrite(node.account);\n\n    if ('issuer' in node)\n      node_new.issuer   = UInt160.json_rewrite(node.issuer);\n\n    if ('currency' in node)\n      node_new.currency = Currency.json_rewrite(node.currency);\n\n    path_new.push(node_new);\n  }\n\n  return path_new;\n}\n\nTransaction.prototype.path_add = function (path) {\n  this.tx_json.Paths  = this.tx_json.Paths || []\n  this.tx_json.Paths.push(Transaction._path_rewrite(path));\n\n  return this;\n}\n\n// --> paths: undefined or array of path\n// A path is an array of objects containing some combination of: account, currency, issuer\nTransaction.prototype.paths = function (paths) {\n  for (var index in paths) {\n    this.path_add(paths[index]);\n  }\n\n  return this;\n}\n\n// If the secret is in the config object, it does not need to be provided.\nTransaction.prototype.secret = function (secret) {\n  this._secret = secret;\n}\n\nTransaction.prototype.send_max = function (send_max) {\n  if (send_max)\n      this.tx_json.SendMax = Amount.json_rewrite(send_max);\n\n  return this;\n}\n\n// --> rate: In billionths.\nTransaction.prototype.transfer_rate = function (rate) {\n  this.tx_json.TransferRate = Number(rate);\n\n  if (this.tx_json.TransferRate < 1e9)\n    throw 'invalidTransferRate';\n\n  return this;\n}\n\n// Add flags to a transaction.\n// --> flags: undefined, _flag_, or [ _flags_ ]\nTransaction.prototype.set_flags = function (flags) {\n  if (flags) {\n      var   transaction_flags = Remote.flags[this.tx_json.TransactionType];\n\n      if (undefined == this.tx_json.Flags)      // We plan to not define this field on new Transaction.\n        this.tx_json.Flags        = 0;\n\n      var flag_set  = 'object' === typeof flags ? flags : [ flags ];\n\n      for (index in flag_set) {\n        var flag  = flag_set[index];\n\n        if (flag in transaction_flags)\n        {\n          this.tx_json.Flags      += transaction_flags[flag];\n        }\n        else {\n          // XXX Immediately report an error or mark it.\n        }\n      }\n  }\n\n  return this;\n}\n\n//\n// Transactions\n//\n\nTransaction.prototype._account_secret = function (account) {\n  // Fill in secret from remote, if available.\n  return this.remote.secrets[account];\n};\n\n// Options:\n//  .domain()           NYI\n//  .message_key()      NYI\n//  .transfer_rate()\n//  .wallet_locator()   NYI\n//  .wallet_size()      NYI\nTransaction.prototype.account_set = function (src) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'AccountSet';\n  this.tx_json.Account          = UInt160.json_rewrite(src);\n\n  return this;\n};\n\nTransaction.prototype.claim = function (src, generator, public_key, signature) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'Claim';\n  this.tx_json.Generator        = generator;\n  this.tx_json.PublicKey        = public_key;\n  this.tx_json.Signature        = signature;\n\n  return this;\n};\n\nTransaction.prototype.offer_cancel = function (src, sequence) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'OfferCancel';\n  this.tx_json.Account          = UInt160.json_rewrite(src);\n  this.tx_json.OfferSequence    = Number(sequence);\n\n  return this;\n};\n\n// --> expiration : Date or Number\nTransaction.prototype.offer_create = function (src, taker_pays, taker_gets, expiration) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'OfferCreate';\n  this.tx_json.Account          = UInt160.json_rewrite(src);\n  this.tx_json.TakerPays        = Amount.json_rewrite(taker_pays);\n  this.tx_json.TakerGets        = Amount.json_rewrite(taker_gets);\n\n  if (this.remote.local_fee) {\n    this.tx_json.Fee            = Remote.fees.offer.to_json();\n  }\n\n  if (expiration)\n    this.tx_json.Expiration  = Date === expiration.constructor\n                                    ? expiration.getTime()\n                                    : Number(expiration);\n\n  return this;\n};\n\nTransaction.prototype.password_fund = function (src, dst) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'PasswordFund';\n  this.tx_json.Destination      = UInt160.json_rewrite(dst);\n\n  return this;\n}\n\nTransaction.prototype.password_set = function (src, authorized_key, generator, public_key, signature) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'PasswordSet';\n  this.tx_json.RegularKey       = authorized_key;\n  this.tx_json.Generator        = generator;\n  this.tx_json.PublicKey        = public_key;\n  this.tx_json.Signature        = signature;\n\n  return this;\n}\n\n// Construct a 'payment' transaction.\n//\n// When a transaction is submitted:\n// - If the connection is reliable and the server is not merely forwarding and is not malicious,\n// --> src : UInt160 or String\n// --> dst : UInt160 or String\n// --> deliver_amount : Amount or String.\n//\n// Options:\n//  .paths()\n//  .build_path()\n//  .path_add()\n//  .secret()\n//  .send_max()\n//  .set_flags()\nTransaction.prototype.payment = function (src, dst, deliver_amount) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'Payment';\n  this.tx_json.Account          = UInt160.json_rewrite(src);\n  this.tx_json.Amount           = Amount.json_rewrite(deliver_amount);\n  this.tx_json.Destination      = UInt160.json_rewrite(dst);\n\n  return this;\n}\n\nTransaction.prototype.ripple_line_set = function (src, limit, quality_in, quality_out) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'TrustSet';\n  this.tx_json.Account          = UInt160.json_rewrite(src);\n\n  // Allow limit of 0 through.\n  if (undefined !== limit)\n    this.tx_json.LimitAmount  = Amount.json_rewrite(limit);\n\n  if (quality_in)\n    this.tx_json.QualityIn    = quality_in;\n\n  if (quality_out)\n    this.tx_json.QualityOut   = quality_out;\n\n  // XXX Throw an error if nothing is set.\n\n  return this;\n};\n\nTransaction.prototype.wallet_add = function (src, amount, authorized_key, public_key, signature) {\n  this._secret                  = this._account_secret(src);\n  this.tx_json.TransactionType  = 'WalletAdd';\n  this.tx_json.Amount           = Amount.json_rewrite(amount);\n  this.tx_json.RegularKey       = authorized_key;\n  this.tx_json.PublicKey        = public_key;\n  this.tx_json.Signature        = signature;\n\n  return this;\n};\n\nexports.config          = {};\nexports.Remote          = Remote;\n\n// vim:sw=2:sts=2:ts=8:et\n\n\n// WEBPACK FOOTER //\n// module.id = 1\n// module.realId = 7\n// module.chunks = main\n//@ sourceURL=webpack-module:///./remote.js");
/******/ /* WEBPACK FREE VAR INJECTION */ }(require(/* __webpack_console */1)))

/******/},
/******/
/******/8: function(module, exports, require) {

/******/ /* WEBPACK FREE VAR INJECTION */ (function(console) {
eval("exports = module.exports = require(3);\n\n// We override this function for browsers, because they print objects nicer\n// natively than JSON.stringify can.\nexports.logObject = function (msg, obj) {\n  console.log(msg, \"\", obj);\n};\n\n\n// WEBPACK FOOTER //\n// module.id = 5\n// module.realId = 8\n// module.chunks = main\n//@ sourceURL=webpack-module:///./utils.web.js");
/******/ /* WEBPACK FREE VAR INJECTION */ }(require(/* __webpack_console */1)))

/******/},
/******/
/******/9: function(module, exports, require) {

eval("module.exports = WebSocket;\n\n\n// WEBPACK FOOTER //\n// module.id = 3\n// module.realId = 9\n// module.chunks = main\n//@ sourceURL=webpack-module:///atlas/www/ripple/web_modules/ws.js");

/******/}
/******/})